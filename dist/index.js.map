{"version":3,"sources":["../src/index.js"],"names":["keys","compact","filter","o","p","toString","length","fail","type","node","Error","JSON","stringify","parens","string","indent","text","count","Deparser","deparse","query","deparseQuery","tree","map","join","deparseNodes","nodes","list","separator","quote","value","isArray","escape","literal","replace","convertTypeName","typeName","size","names","args","name","catalog","mods","String","str","res","item","context","isNumber","values","output","kind","lexpr","push","schema","operator","rexpr","op","FuncCall","Null","aliasname","colnames","elements","val","lidx","uidx","arg","i","indirection","subnode","A_Star","prefix","substring","boolop","tests","booltesttype","defresult","collname","colname","raw_default","constraints","fields","field","ctename","aliascolnames","ctequery","params","agg_star","funcname","order","withinGroup","agg_within_group","agg_order","call","agg_distinct","func_variadic","agg_filter","over","content","ival","rel","larg","isNatural","jointype","quals","usingClause","rarg","JoinExpr","alias","using","wrapped","strengths","strength","lockedRels","nulltesttype","number","lateral","funcs","functions","funcCall","calls","is_rowsfrom","ordinality","coldeflist","defList","subquery","relation","method","repeatable","inhOpt","relpersistence","schemaname","relname","row_format","withClause","valuesLists","sets","all","distinctClause","clause","e","targetList","intoClause","fromClause","whereClause","lists","v","groupClause","havingClause","windowClause","windows","w","window","WindowDef","sortClause","limitCount","limitOffset","lockingClause","forEach","sortby_dir","useOp","sortby_nulls","subLinkType","subselect","testexpr","operName","last","deparseInterval","setof","typmods","arrayBounds","expr","result","empty","partitionClause","orderClause","frameOptions","deparseFrameOptions","refname","startOffset","endOffset","windowParts","useParens","partition","orders","recursive","ctes","options","refName","FRAMEOPTION_NONDEFAULT","FRAMEOPTION_RANGE","FRAMEOPTION_ROWS","FRAMEOPTION_BETWEEN","FRAMEOPTION_START_UNBOUNDED_PRECEDING","FRAMEOPTION_END_UNBOUNDED_PRECEDING","FRAMEOPTION_START_UNBOUNDED_FOLLOWING","FRAMEOPTION_END_UNBOUNDED_FOLLOWING","FRAMEOPTION_START_CURRENT_ROW","FRAMEOPTION_END_CURRENT_ROW","FRAMEOPTION_START_VALUE_PRECEDING","FRAMEOPTION_END_VALUE_PRECEDING","FRAMEOPTION_START_VALUE_FOLLOWING","FRAMEOPTION_END_VALUE_FOLLOWING","between","intervals","interval","A_Const","Integer","part","mask","MASKS","BITS","invert","INTERVALS","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","INTERVAL_FULL_RANGE"],"mappings":";;;;AAAA;;;;AACA;;;;;;IAEQA,I,oBAAAA,I;;;AAER,IAAMC,UAAU,SAAVA,OAAU,IAAK;AACnB,SAAO,iBAAEC,MAAF,CAAS,iBAAED,OAAF,CAAUE,CAAV,CAAT,EAAuB,UAACC,CAAD,EAAO;AACnC,QAAIA,KAAK,IAAT,EAAe;AACb,aAAO,KAAP;AACD;;AAED,WAAOA,EAAEC,QAAF,GAAaC,MAApB;AACD,GANM,CAAP;AAOD,CARD;;AAUA,IAAMC,OAAO,SAAPA,IAAO,CAACC,IAAD,EAAOC,IAAP,EAAgB;AAC3B,QAAM,IAAIC,KAAJ,CAAU,kBAAO,uBAAP,EAAgCF,IAAhC,EAAsCG,KAAKC,SAAL,CAAeH,IAAf,CAAtC,CAAV,CAAN;AACD,CAFD;;AAIA,IAAMI,SAAS,SAATA,MAAS,CAACC,MAAD,EAAY;AACzB,SAAO,MAAMA,MAAN,GAAe,GAAtB;AACD,CAFD;;AAIA,IAAMC,SAAS,SAATA,MAAS,CAACC,IAAD;AAAA,MAAOC,KAAP,uEAAe,CAAf;AAAA,SAAqBD,IAArB;AAAA,CAAf;;IAEqBE,Q;WACZC,O,oBAAQC,K,EAAO;AACpB,WAAO,IAAIF,QAAJ,CAAaE,KAAb,EAAoBC,YAApB,EAAP;AACD,G;;AAED,oBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;qBAEDD,Y,2BAAe;AAAA;;AACb,WAAQ,KAAKC,IAAL,CAAUC,GAAV,CAAc;AAAA,aAAQ,MAAKJ,OAAL,CAAaV,IAAb,CAAR;AAAA,KAAd,CAAD,CAA4Ce,IAA5C,CAAiD,MAAjD,CAAP;AACD,G;;qBAEDC,Y,yBAAaC,K,EAAO;AAAA;;AAClB,WAAOA,MAAMH,GAAN,CAAU;AAAA,aAAQ,OAAKJ,OAAL,CAAaV,IAAb,CAAR;AAAA,KAAV,CAAP;AACD,G;;qBAEDkB,I,iBAAKD,K,EAAyB;AAAA,QAAlBE,SAAkB,uEAAN,IAAM;;AAC5B,QAAI,CAACF,KAAL,EAAY;AACV,aAAO,EAAP;AACD;;AAED,WAAO,KAAKD,YAAL,CAAkBC,KAAlB,EAAyBF,IAAzB,CAA8BI,SAA9B,CAAP;AACD,G;;qBAEDC,K,kBAAMC,K,EAAO;AAAA;;AACX,QAAIA,SAAS,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,iBAAEC,OAAF,CAAUD,KAAV,CAAJ,EAAsB;AACpB,aAAOA,MAAMP,GAAN,CAAU;AAAA,eAAK,OAAKM,KAAL,CAAW1B,CAAX,CAAL;AAAA,OAAV,CAAP;AACD;;AAED,WAAO,MAAM2B,KAAN,GAAc,GAArB;AACD,G;;AAED;;;qBACAE,M,mBAAOC,O,EAAS;AACd,WAAO,MAAMA,QAAQC,OAAR,CAAgB,IAAhB,EAAsB,IAAtB,CAAN,GAAoC,GAA3C;AACD,G;;qBAEDC,e,4BAAgBC,Q,EAAUC,I,EAAM;AAC9B,YAAQD,QAAR;AACE,WAAK,QAAL;AACE,YAAIC,QAAQ,IAAZ,EAAkB;AAChB,iBAAO,MAAP;AACD;AACD;AACA;AACA,eAAO,mBAAP;AACF,WAAK,SAAL;AACE,eAAO,SAAP;AACF,WAAK,SAAL;AACE,eAAO,SAAP;AACF,WAAK,MAAL;AACE,eAAO,SAAP;AACF,WAAK,MAAL;AACE,eAAO,UAAP;AACF,WAAK,MAAL;AACE,eAAO,KAAP;AACF,WAAK,MAAL;AACE,eAAO,QAAP;AACF,WAAK,MAAL,CAAa,KAAK,QAAL;AACX,eAAO,MAAP;AACF,WAAK,QAAL;AACE,eAAO,mBAAP;AACF,WAAK,MAAL;AACE;AACA,eAAO,iBAAP;AACF,WAAK,MAAL;AACE,eAAO,iBAAP;AACF,WAAK,MAAL;AACE,eAAO,MAAP;AACF,WAAK,QAAL;AACE,eAAO,mBAAP;AACF,WAAK,WAAL;AACE,eAAO,WAAP;AACF,WAAK,aAAL;AACE,eAAO,wBAAP;AACF,WAAK,UAAL;AACE,eAAO,UAAP;AACF,WAAK,KAAL;AACE,eAAO,KAAP;AACF;AACE,cAAM,IAAI3B,KAAJ,CAAU,kBAAO,yBAAP,EAAkC0B,QAAlC,CAAV,CAAN;AA1CJ;AA4CD,G;;qBAED5B,I,iBAAK8B,K,EAAOC,I,EAAM;AAAA;;AAAA,qBACUD,MAAMf,GAAN,CAAU;AAAA,aAAQ,OAAKJ,OAAL,CAAaqB,IAAb,CAAR;AAAA,KAAV,CADV;;AAAA,QACRC,OADQ;AAAA,QACCjC,IADD;;;AAGhB,QAAMkC,OAAO,SAAPA,IAAO,CAACF,IAAD,EAAOH,IAAP,EAAgB;AAC3B,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,eAAOG,OAAO,GAAP,GAAaH,IAAb,GAAoB,GAA3B;AACD;;AAED,aAAOG,IAAP;AACD,KAND;;AAQA;AACA,QAAIF,MAAM,CAAN,EAASK,MAAT,CAAgBC,GAAhB,KAAwB,MAA5B,EAAoC;AAClCN,YAAM,CAAN,EAASK,MAAT,CAAgBC,GAAhB,GAAsB,QAAtB;AACD;;AAED,QAAIH,YAAY,YAAhB,EAA8B;AAC5B,aAAOC,KAAK,KAAKf,IAAL,CAAUW,KAAV,EAAiB,GAAjB,CAAL,EAA4BC,IAA5B,CAAP;AACD;;AAED,QAAMM,MAAM,KAAKV,eAAL,CAAqB3B,IAArB,EAA2B+B,IAA3B,CAAZ;;AAEA,WAAOG,KAAKG,GAAL,EAAUN,IAAV,CAAP;AACD,G;;qBAEDpB,O,oBAAQ2B,I,EAAMC,O,EAAS;AACrB,QAAID,QAAQ,IAAZ,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAI,iBAAEE,QAAF,CAAWF,IAAX,CAAJ,EAAsB;AACpB,aAAOA,IAAP;AACD;;AAED,QAAMtC,OAAOR,KAAK8C,IAAL,EAAW,CAAX,CAAb;AACA,QAAMrC,OAAO,iBAAEwC,MAAF,CAASH,IAAT,EAAe,CAAf,CAAb;;AAEA,QAAI,KAAKtC,IAAL,KAAc,IAAlB,EAAwB;AACtB,YAAM,IAAIE,KAAJ,CAAUF,OAAO,qBAAjB,CAAN;AACD;;AAED,WAAO,KAAKA,IAAL,EAAWC,IAAX,EAAiBsC,OAAjB,CAAP;AACD,G;;qBAEA,Q,oBAAUtC,I,EAAMsC,O,EAAS;AACxB,QAAMG,SAAS,EAAf;;AAEA,YAAQzC,KAAK0C,IAAb;AACE,WAAK,CAAL;AAAQ;AACN,YAAI1C,KAAK2C,KAAT,EAAgB;AACdF,iBAAOG,IAAP,CAAYxC,OAAO,KAAKM,OAAL,CAAaV,KAAK2C,KAAlB,CAAP,CAAZ;AACD;;AAED,YAAI3C,KAAK+B,IAAL,CAAUlC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAMgD,SAAS,KAAKnC,OAAL,CAAaV,KAAK+B,IAAL,CAAU,CAAV,CAAb,CAAf;AACA,cAAMe,WAAW,KAAKpC,OAAL,CAAaV,KAAK+B,IAAL,CAAU,CAAV,CAAb,CAAjB;AACAU,iBAAOG,IAAP,eAAwBC,MAAxB,SAAkCC,QAAlC;AACD,SAJD,MAIO;AACLL,iBAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK+B,IAAL,CAAU,CAAV,CAAb,CAAZ;AACD;;AAED,YAAI/B,KAAK+C,KAAT,EAAgB;AACdN,iBAAOG,IAAP,CAAYxC,OAAO,KAAKM,OAAL,CAAaV,KAAK+C,KAAlB,CAAP,CAAZ;AACD;;AAED,YAAIN,OAAO5C,MAAP,KAAkB,CAAtB,EAAyB;AACvB,iBAAOO,OAAOqC,OAAO1B,IAAP,CAAY,EAAZ,CAAP,CAAP;AACD;;AAED,eAAOX,OAAOqC,OAAO1B,IAAP,CAAY,GAAZ,CAAP,CAAP;;AAEF,WAAK,CAAL;AAAQ;AACN0B,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;AACAF,eAAOG,IAAP,CAAY,kBAAO,UAAP,EAAmB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAlB,CAAnB,CAAZ;AACA,eAAON,OAAO1B,IAAP,OAAgB,KAAKL,OAAL,CAAaV,KAAK+B,IAAL,CAAU,CAAV,CAAb,CAAhB,OAAP;;AAEF,WAAK,CAAL;AAAQ;AACNU,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;AACAF,eAAOG,IAAP,CAAY,kBAAO,UAAP,EAAmB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAlB,CAAnB,CAAZ;AACA,eAAON,OAAO1B,IAAP,OAAgB,KAAKL,OAAL,CAAaV,KAAK+B,IAAL,CAAU,CAAV,CAAb,CAAhB,OAAP;;AAEF,WAAK,CAAL;AAAQ;AACN,eAAO,kBAAO,wBAAP,EAAiC,KAAKrB,OAAL,CAAaV,KAAK2C,KAAlB,CAAjC,EAA2D,KAAKjC,OAAL,CAAaV,KAAK+C,KAAlB,CAA3D,CAAP;;AAEF,WAAK,CAAL;AAAQ;AACN,eAAO,kBAAO,gBAAP,EAAyB,KAAKrC,OAAL,CAAaV,KAAK2C,KAAlB,CAAzB,EAAmD,KAAKjC,OAAL,CAAaV,KAAK+C,KAAlB,CAAnD,CAAP;;AAEF,WAAK,CAAL;AAAQ;AAAE;AACR,cAAMC,KAAKhD,KAAK+B,IAAL,CAAU,CAAV,EAAaG,MAAb,CAAoBC,GAApB,KAA4B,GAA5B,GAAkC,OAAlC,GAA4C,WAAvD;AACA,iBAAO,kBAAO,YAAP,EAAqB,KAAKzB,OAAL,CAAaV,KAAK2C,KAAlB,CAArB,EAA+CK,EAA/C,EAAmD,KAAK9B,IAAL,CAAUlB,KAAK+C,KAAf,CAAnD,CAAP;AACD;;AAED,WAAK,CAAL;AAAQ;AAAE;AACR,cAAMD,YAAW9C,KAAK+B,IAAL,CAAU,CAAV,EAAaG,MAAb,CAAoBC,GAApB,KAA4B,GAA5B,GAAkC,IAAlC,GAAyC,QAA1D;;AAEA,iBAAO,kBAAO,YAAP,EAAqB,KAAKzB,OAAL,CAAaV,KAAK2C,KAAlB,CAArB,EAA+CG,SAA/C,EAAyD,KAAK5B,IAAL,CAAUlB,KAAK+C,KAAf,CAAzD,CAAP;AACD;;AAED,WAAK,CAAL;AAAQ;AACNN,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;;AAEA,YAAI3C,KAAK+B,IAAL,CAAU,CAAV,EAAaG,MAAb,CAAoBC,GAApB,KAA4B,KAAhC,EAAuC;AACrCM,iBAAOG,IAAP,CAAY,kBAAO,eAAP,EAAwB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAlB,CAAxB,CAAZ;AACD,SAFD,MAEO;AACLN,iBAAOG,IAAP,CAAY,kBAAO,WAAP,EAAoB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAlB,CAApB,CAAZ;AACD;;AAED,eAAON,OAAO1B,IAAP,CAAY,GAAZ,CAAP;;AAEF,WAAK,CAAL;AAAQ;AACN0B,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;;AAEA,YAAI3C,KAAK+B,IAAL,CAAU,CAAV,EAAaG,MAAb,CAAoBC,GAApB,KAA4B,MAAhC,EAAwC;AACtCM,iBAAOG,IAAP,CAAY,kBAAO,gBAAP,EAAyB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAlB,CAAzB,CAAZ;AACD,SAFD,MAEO;AACLN,iBAAOG,IAAP,CAAY,kBAAO,YAAP,EAAqB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAlB,CAArB,CAAZ;AACD;;AAED,eAAON,OAAO1B,IAAP,CAAY,GAAZ,CAAP;;AAEF,WAAK,CAAL;AAAQ;AACN;AACA0B,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;;AAEA,YAAI,KAAKjC,OAAL,CAAaV,KAAK+C,KAAL,CAAWE,QAAX,CAAoBnB,IAApB,CAAyB,CAAzB,EAA4BoB,IAAzC,CAAJ,EAAoD;AAClDT,iBAAOG,IAAP,CAAY,kBAAO,eAAP,EAAwB,KAAKlC,OAAL,CAAaV,KAAK+C,KAAL,CAAWE,QAAX,CAAoBnB,IAApB,CAAyB,CAAzB,CAAb,CAAxB,CAAZ;AACD,SAFD,MAEO;AACLW,iBAAOG,IAAP,CAAY,kBAAO,yBAAP,EACO,KAAKlC,OAAL,CAAaV,KAAK+C,KAAL,CAAWE,QAAX,CAAoBnB,IAApB,CAAyB,CAAzB,CAAb,CADP,EAEO,KAAKpB,OAAL,CAAaV,KAAK+C,KAAL,CAAWE,QAAX,CAAoBnB,IAApB,CAAyB,CAAzB,CAAb,CAFP,CAAZ;AAGD;;AAED,eAAOW,OAAO1B,IAAP,CAAY,GAAZ,CAAP;;AAEF,WAAK,EAAL;AAAS;AACP0B,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;AACAF,eAAOG,IAAP,CAAY,kBAAO,mBAAP,EAA4B,KAAKlC,OAAL,CAAaV,KAAK+C,KAAL,CAAW,CAAX,CAAb,CAA5B,EAAyD,KAAKrC,OAAL,CAAaV,KAAK+C,KAAL,CAAW,CAAX,CAAb,CAAzD,CAAZ;AACA,eAAON,OAAO1B,IAAP,CAAY,GAAZ,CAAP;;AAEF,WAAK,EAAL;AAAS;AACP0B,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2C,KAAlB,CAAZ;AACAF,eAAOG,IAAP,CAAY,kBAAO,uBAAP,EAAgC,KAAKlC,OAAL,CAAaV,KAAK+C,KAAL,CAAW,CAAX,CAAb,CAAhC,EAA6D,KAAKrC,OAAL,CAAaV,KAAK+C,KAAL,CAAW,CAAX,CAAb,CAA7D,CAAZ;AACA,eAAON,OAAO1B,IAAP,CAAY,GAAZ,CAAP;;AAEF;AACE,eAAOjB,KAAK,QAAL,EAAeE,IAAf,CAAP;AAlGJ;AAoGD,G;;qBAEA,O,mBAASA,I,EAAMsC,O,EAAS;AACvB,QAAMP,OAAO/B,KAAKmD,SAAlB;;AAEA,QAAMV,SAAS,CAAE,IAAF,CAAf;;AAEA,QAAIzC,KAAKoD,QAAT,EAAmB;AACjBX,aAAOG,IAAP,CAAYb,OAAO3B,OAAO,KAAKc,IAAL,CAAUlB,KAAKoD,QAAf,CAAP,CAAnB;AACD,KAFD,MAEO;AACLX,aAAOG,IAAP,CAAY,KAAKxB,KAAL,CAAWW,IAAX,CAAZ;AACD;;AAED,WAAOU,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,a,yBAAef,I,EAAM;AACpB,WAAO,kBAAO,WAAP,EAAoB,KAAKkB,IAAL,CAAUlB,KAAKqD,QAAf,CAApB,CAAP;AACD,G;;qBAEA,S,qBAAWrD,I,EAAMsC,O,EAAS;AACzB,QAAItC,KAAKsD,GAAL,CAASpB,MAAb,EAAqB;AACnB,aAAO,KAAKX,MAAL,CAAY,KAAKb,OAAL,CAAaV,KAAKsD,GAAlB,CAAZ,CAAP;AACD;;AAED,WAAO,KAAK5C,OAAL,CAAaV,KAAKsD,GAAlB,CAAP;AACD,G;;qBAEA,W,uBAAatD,I,EAAM;AAClB,QAAIA,KAAKuD,IAAT,EAAe;AACb,aAAO,kBAAO,SAAP,EAAkB,KAAK7C,OAAL,CAAaV,KAAKuD,IAAlB,CAAlB,EAA2C,KAAK7C,OAAL,CAAaV,KAAKwD,IAAlB,CAA3C,CAAP;AACD;;AAED,WAAO,kBAAO,MAAP,EAAe,KAAK9C,OAAL,CAAaV,KAAKwD,IAAlB,CAAf,CAAP;AACD,G;;qBAEA,e,2BAAiBxD,I,EAAM;AACtB,QAAMyC,SAAS,OAAM,KAAK/B,OAAL,CAAaV,KAAKyD,GAAlB,CAAN,OAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI1D,KAAK2D,WAAL,CAAiB9D,MAArC,EAA6C6D,GAA7C,EAAkD;AAChD,UAAME,UAAU5D,KAAK2D,WAAL,CAAiBD,CAAjB,CAAhB;;AAEA,UAAIE,QAAQ1B,MAAR,IAAkB0B,QAAQC,MAA9B,EAAsC;AACpC,YAAMxC,QAAQuC,QAAQC,MAAR,GAAiB,GAAjB,GAAuB,KAAKzC,KAAL,CAAWwC,QAAQ1B,MAAR,CAAeC,GAA1B,CAArC;;AAEAM,eAAOG,IAAP,OAAgBvB,KAAhB;AACD,OAJD,MAIO;AACLoB,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAakD,OAAb,CAAZ;AACD;AACF;;AAED,WAAOnB,OAAO1B,IAAP,CAAY,EAAZ,CAAP;AACD,G;;qBAEA,Q,oBAAUf,I,EAAMsC,O,EAAS;AACxB,WAAO,GAAP;AACD,G;;qBAEA,W,uBAAatC,I,EAAM;AAClB,QAAM8D,SAAS9D,KAAKmC,GAAL,CAAS,CAAT,CAAf;AACA,WAAU2B,MAAV,UAAoB9D,KAAKmC,GAAL,CAAS4B,SAAT,CAAmB,CAAnB,CAApB;AACD,G;;qBAEA,U,sBAAY/D,I,EAAM;AACjB,YAAQA,KAAKgE,MAAb;AACE,WAAK,CAAL;AACE,eAAO5D,OAAO,KAAKc,IAAL,CAAUlB,KAAK8B,IAAf,EAAqB,OAArB,CAAP,CAAP;AACF,WAAK,CAAL;AACE,eAAO1B,OAAO,KAAKc,IAAL,CAAUlB,KAAK8B,IAAf,EAAqB,MAArB,CAAP,CAAP;AACF,WAAK,CAAL;AACE,eAAO,kBAAO,UAAP,EAAmB,KAAKpB,OAAL,CAAaV,KAAK8B,IAAL,CAAU,CAAV,CAAb,CAAnB,CAAP;AACF;AACE,eAAOhC,KAAK,UAAL,EAAiBE,IAAjB,CAAP;AARJ;AAUD,G;;qBAEA,a,yBAAeA,I,EAAM;AACpB,QAAMyC,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKyD,GAAlB,CAAZ;;AAEA,QAAMQ,QAAQ,CACZ,SADY,EAEZ,aAFY,EAGZ,UAHY,EAIZ,cAJY,EAKZ,YALY,EAMZ,gBANY,CAAd;;AASAxB,WAAOG,IAAP,CAAYqB,MAAMjE,KAAKkE,YAAX,CAAZ;;AAEA,WAAOzB,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,U,sBAAYf,I,EAAM;AACjB,QAAMyC,SAAS,CAAE,MAAF,CAAf;;AAEA,QAAIzC,KAAKyD,GAAT,EAAc;AACZhB,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKyD,GAAlB,CAAZ;AACD;;AAED,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI1D,KAAK8B,IAAL,CAAUjC,MAA9B,EAAsC6D,GAAtC,EAA2C;AACzCjB,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK8B,IAAL,CAAU4B,CAAV,CAAb,CAAZ;AACD;;AAED,QAAI1D,KAAKmE,SAAT,EAAoB;AAClB1B,aAAOG,IAAP,CAAY,MAAZ;AACAH,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKmE,SAAlB,CAAZ;AACD;;AAED1B,WAAOG,IAAP,CAAY,KAAZ;;AAEA,WAAOH,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,c,0BAAgBf,I,EAAM;AACrB,WAAO,kBAAO,cAAP,EAAuB,KAAKkB,IAAL,CAAUlB,KAAK8B,IAAf,CAAvB,CAAP;AACD,G;;qBAEA,e,2BAAiB9B,I,EAAM;AACtB,QAAMyC,SAAS,EAAf;;AAEA,QAAIzC,KAAKyD,GAAT,EAAc;AACZhB,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKyD,GAAlB,CAAZ;AACD;;AAEDhB,WAAOG,IAAP,CAAY,SAAZ;;AAEA,QAAI5C,KAAKoE,QAAT,EAAmB;AACjB3B,aAAOG,IAAP,CAAY,KAAKxB,KAAL,CAAW,KAAKJ,YAAL,CAAkBhB,KAAKoE,QAAvB,CAAX,CAAZ;AACD;;AAED,WAAO3B,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,W,uBAAaf,I,EAAM;AAClB,QAAMyC,SAAS,CAAE,KAAKrB,KAAL,CAAWpB,KAAKqE,OAAhB,CAAF,CAAf;;AAEA5B,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK2B,QAAlB,CAAZ;;AAEA,QAAI3B,KAAKsE,WAAT,EAAsB;AACpB7B,aAAOG,IAAP,CAAY,OAAZ;AACAH,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKsE,WAAlB,CAAZ;AACD;;AAED,QAAItE,KAAKuE,WAAT,EAAsB;AACpB9B,aAAOG,IAAP,CAAY,KAAK1B,IAAL,CAAUlB,KAAKuE,WAAf,EAA4B,GAA5B,CAAZ;AACD;;AAED,WAAO,iBAAE/E,OAAF,CAAUiD,MAAV,EAAkB1B,IAAlB,CAAuB,GAAvB,CAAP;AACD,G;;qBAEA,W,uBAAaf,I,EAAM;AAAA;;AAClB,QAAMwE,SAASxE,KAAKwE,MAAL,CAAY1D,GAAZ,CAAgB,iBAAS;AACtC,UAAI2D,MAAMvC,MAAV,EAAkB;AAChB,eAAO,OAAKd,KAAL,CAAW,OAAKV,OAAL,CAAa+D,KAAb,CAAX,CAAP;AACD;;AAED,aAAO,OAAK/D,OAAL,CAAa+D,KAAb,CAAP;AACD,KANc,CAAf;;AAQA,WAAOD,OAAOzD,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,iB,6BAAmBf,I,EAAM;AACxB,QAAMyC,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY5C,KAAK0E,OAAjB;;AAEA,QAAI1E,KAAK2E,aAAT,EAAwB;AACtBlC,aAAOG,IAAP,CAAY,kBAAO,MAAP,EAAe,KAAKxB,KAAL,CAAW,KAAKJ,YAAL,CAAkBhB,KAAK2E,aAAvB,CAAX,CAAf,CAAZ;AACD;;AAEDlC,WAAOG,IAAP,CAAY,kBAAO,SAAP,EAAkB,KAAKlC,OAAL,CAAaV,KAAK4E,QAAlB,CAAlB,CAAZ;;AAEA,WAAOnC,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,O,mBAASf,I,EAAM;AACd;AACA,QAAIA,KAAKmC,GAAL,CAAS,CAAT,MAAgB,GAApB,EAAyB;AACvB,mBAAWnC,KAAKmC,GAAhB;AACD;;AAED,WAAOnC,KAAKmC,GAAZ;AACD,G;;qBAEA,U,sBAAYnC,I,EAAMsC,O,EAAS;AAAA;;AAC1B,QAAMG,SAAS,EAAf;;AAEA,QAAIoC,SAAS,EAAb;;AAEA,QAAI7E,KAAK8B,IAAT,EAAe;AACb+C,eAAS7E,KAAK8B,IAAL,CAAUhB,GAAV,CAAc,gBAAQ;AAC7B,eAAO,OAAKJ,OAAL,CAAa2B,IAAb,CAAP;AACD,OAFQ,CAAT;AAGD;;AAED;AACA,QAAIrC,KAAK8E,QAAT,EAAmB;AACjBD,aAAOjC,IAAP,CAAY,GAAZ;AACD;;AAED,QAAMb,OAAO,KAAKb,IAAL,CAAUlB,KAAK+E,QAAf,EAAyB,GAAzB,CAAb;;AAEA,QAAMC,QAAQ,EAAd;;AAEA,QAAMC,cAAcjF,KAAKkF,gBAAzB;;AAEA,QAAIlF,KAAKmF,SAAT,EAAoB;AAClBH,YAAMpC,IAAN,CAAW,UAAX;AACAoC,YAAMpC,IAAN,CAAW,KAAK1B,IAAL,CAAUlB,KAAKmF,SAAf,EAA0B,IAA1B,CAAX;AACD;;AAED,QAAMC,OAAO,EAAb;;AAEAA,SAAKxC,IAAL,CAAUb,OAAO,GAAjB;;AAEA,QAAI/B,KAAKqF,YAAT,EAAuB;AACrBD,WAAKxC,IAAL,CAAU,WAAV;AACD;;AAED;AACA;AACA,QAAI5C,KAAKsF,aAAT,EAAwB;AACtBT,aAAOA,OAAOhF,MAAP,GAAgB,CAAvB,IAA4B,cAAcgF,OAAOA,OAAOhF,MAAP,GAAgB,CAAvB,CAA1C;AACD;;AAEDuF,SAAKxC,IAAL,CAAUiC,OAAO9D,IAAP,CAAY,IAAZ,CAAV;;AAEA,QAAIiE,MAAMnF,MAAN,IAAgB,CAACoF,WAArB,EAAkC;AAChCG,WAAKxC,IAAL,CAAU,GAAV;AACAwC,WAAKxC,IAAL,CAAUoC,MAAMjE,IAAN,CAAW,GAAX,CAAV;AACD;;AAEDqE,SAAKxC,IAAL,CAAU,GAAV;;AAEAH,WAAOG,IAAP,CAAYpD,QAAQ4F,IAAR,EAAcrE,IAAd,CAAmB,EAAnB,CAAZ;;AAEA,QAAIiE,MAAMnF,MAAN,IAAgBoF,WAApB,EAAiC;AAC/BxC,aAAOG,IAAP,CAAY,cAAZ;AACAH,aAAOG,IAAP,CAAYxC,OAAO4E,MAAMjE,IAAN,CAAW,GAAX,CAAP,CAAZ;AACD;;AAED,QAAIf,KAAKuF,UAAL,IAAmB,IAAvB,EAA6B;AAC3B9C,aAAOG,IAAP,CAAY,kBAAO,mBAAP,EAA4B,KAAKlC,OAAL,CAAaV,KAAKuF,UAAlB,CAA5B,CAAZ;AACD;;AAED,QAAIvF,KAAKwF,IAAL,IAAa,IAAjB,EAAuB;AACrB/C,aAAOG,IAAP,CAAY,kBAAO,SAAP,EAAkB,KAAKlC,OAAL,CAAaV,KAAKwF,IAAlB,CAAlB,CAAZ;AACD;;AAED,WAAO/C,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,c,0BAAgBf,I,EAAM;AACrB,WAAO,cAAc,KAAKkB,IAAL,CAAUlB,KAAK8B,IAAf,CAAd,GAAqC,GAA5C;AACD,G;;qBAEA,a,yBAAe9B,I,EAAM;AACpB,YAAQA,KAAK0C,IAAb;AACE,WAAK,CAAL;AAAQ;AACN,eAAO,IAAP;;AAEF,WAAK,CAAL;AAAQ;AACN,eAAO5C,KAAK,aAAL,EAAoBE,IAApB,CAAP;;AAEF,WAAK,CAAL;AAAQ;AACN,eAAO,aAAa,KAAKkB,IAAL,CAAUlB,KAAKyF,OAAf,CAAb,GAAuC,GAA9C;;AAEF,WAAK,CAAL;AAAQ;AACN,eAAO,WAAW,KAAKvE,IAAL,CAAUlB,KAAKyF,OAAf,CAAX,GAAqC,GAA5C;;AAEF,WAAK,CAAL;AAAQ;AACN,eAAO,oBAAoB,KAAKvE,IAAL,CAAUlB,KAAKyF,OAAf,CAApB,GAA8C,GAArD;;AAEF;AACE,eAAO3F,KAAK,aAAL,EAAoBE,IAApB,CAAP;AAjBJ;AAmBD,G;;qBAEA,S,qBAAWA,I,EAAM;AAChB,QAAIA,KAAK0F,IAAL,GAAY,CAAhB,EAAmB;AACjB,mBAAW1F,KAAK0F,IAAhB;AACD;;AAED,WAAO1F,KAAK0F,IAAL,CAAU9F,QAAV,EAAP;AACD,G;;qBAEA,Y,wBAAcI,I,EAAM;AACnB,WAAO,KAAKU,OAAL,CAAaV,KAAK2F,GAAlB,CAAP;AACD,G;;qBAEA,U,sBAAY3F,I,EAAMsC,O,EAAS;AAC1B,QAAMG,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK4F,IAAlB,CAAZ;;AAEA,QAAI5F,KAAK6F,SAAT,EAAoB;AAClBpD,aAAOG,IAAP,CAAY,SAAZ;AACD;;AAED,QAAI7B,OAAO,IAAX;;AAEA,YAAQ,IAAR;AACE,WAAKf,KAAK8F,QAAL,KAAkB,CAAlB,IAAwB9F,KAAK+F,KAAL,IAAc,IAA3C;AACEhF,eAAO,YAAP;AACA;;AAEF,WAAKf,KAAK8F,QAAL,KAAkB,CAAlB,IAAuB,CAAC9F,KAAK6F,SAA7B,IAA0C,EAAE7F,KAAK+F,KAAL,IAAc,IAAhB,CAA1C,IAAmE,EAAE/F,KAAKgG,WAAL,IAAoB,IAAtB,CAAxE;AACEjF,eAAO,YAAP;AACA;;AAEF,WAAKf,KAAK8F,QAAL,KAAkB,CAAvB;AACE/E,eAAO,MAAP;AACA;;AAEF,WAAKf,KAAK8F,QAAL,KAAkB,CAAvB;AACE/E,eAAO,iBAAP;AACA;;AAEF,WAAKf,KAAK8F,QAAL,KAAkB,CAAvB;AACE/E,eAAO,iBAAP;AACA;;AAEF,WAAKf,KAAK8F,QAAL,KAAkB,CAAvB;AACE/E,eAAO,kBAAP;AACA;;AAEF;AACEjB,aAAK,UAAL,EAAiBE,IAAjB;AACA;AA3BJ;;AA8BAyC,WAAOG,IAAP,CAAY7B,IAAZ;;AAEA,QAAIf,KAAKiG,IAAT,EAAe;AACb;AACA;AACA,UAAKjG,KAAKiG,IAAL,CAAUC,QAAV,IAAsB,IAAvB,IAAgC,EAAElG,KAAKiG,IAAL,CAAUC,QAAV,CAAmBC,KAAnB,IAA4B,IAA9B,CAApC,EAAyE;AACvE1D,eAAOG,IAAP,OAAgB,KAAKlC,OAAL,CAAaV,KAAKiG,IAAlB,CAAhB;AACD,OAFD,MAEO;AACLxD,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKiG,IAAlB,CAAZ;AACD;AACF;;AAED,QAAIjG,KAAK+F,KAAT,EAAgB;AACdtD,aAAOG,IAAP,SAAkB,KAAKlC,OAAL,CAAaV,KAAK+F,KAAlB,CAAlB;AACD;;AAED,QAAI/F,KAAKgG,WAAT,EAAsB;AACpB,UAAMI,QAAQ,KAAKhF,KAAL,CAAW,KAAKJ,YAAL,CAAkBhB,KAAKgG,WAAvB,CAAX,EAAgDjF,IAAhD,CAAqD,IAArD,CAAd;;AAEA0B,aAAOG,IAAP,aAAsBwD,KAAtB;AACD;;AAED,QAAMC,UACHrG,KAAKiG,IAAL,CAAUC,QAAV,IAAsB,IAAvB,IAAgClG,KAAKmG,KAArC,GAA6C,MAAM1D,OAAO1B,IAAP,CAAY,GAAZ,CAAN,GAAyB,GAAtE,GAC6C0B,OAAO1B,IAAP,CAAY,GAAZ,CAF/C;;AAIA,QAAIf,KAAKmG,KAAT,EAAgB;AACd,aAAOE,UAAU,GAAV,GAAgB,KAAK3F,OAAL,CAAaV,KAAKmG,KAAlB,CAAvB;AACD;;AAED,WAAOE,OAAP;AACD,G;;qBAEA,e,2BAAiBrG,I,EAAM;AACtB,QAAMsG,YAAY,CAChB,MADgB,EACR;AACR,mBAFgB,EAGhB,WAHgB,EAIhB,mBAJgB,EAKhB,YALgB,CAAlB;;AAQA,QAAM7D,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY0D,UAAUtG,KAAKuG,QAAf,CAAZ;;AAEA,QAAIvG,KAAKwG,UAAT,EAAqB;AACnB/D,aAAOG,IAAP,CAAY,IAAZ;AACAH,aAAOG,IAAP,CAAY,KAAK1B,IAAL,CAAUlB,KAAKwG,UAAf,CAAZ;AACD;;AAED,WAAO/D,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,Y,wBAAcf,I,EAAM;AACnB,QAAMyC,SAAS,EAAf;;AAEA,QAAIzC,KAAKgD,EAAL,KAAY,CAAhB,EAAmB;AACjBP,aAAOG,IAAP,CAAY,UAAZ;AACD,KAFD,MAEO;AACLH,aAAOG,IAAP,CAAY,OAAZ;AACD;;AAEDH,WAAOG,IAAP,CAAYxC,OAAO,KAAKc,IAAL,CAAUlB,KAAK8B,IAAf,CAAP,CAAZ;;AAEA,WAAOW,OAAO1B,IAAP,CAAY,EAAZ,CAAP;AACD,G;;qBAEA,c,0BAAgBf,I,EAAM;AACrB,QAAMyC,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY5C,KAAK+B,IAAjB;AACAU,WAAOG,IAAP,CAAY,IAAZ;AACAH,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKyD,GAAlB,CAAZ;;AAEA,WAAOhB,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,M,kBAAQf,I,EAAM;AACb,WAAO,MAAP;AACD,G;;qBAEA,U,sBAAYA,I,EAAM;AACjB,QAAMyC,SAAS,CAAE,KAAK/B,OAAL,CAAaV,KAAKyD,GAAlB,CAAF,CAAf;;AAEA,QAAIzD,KAAKyG,YAAL,KAAsB,CAA1B,EAA6B;AAC3BhE,aAAOG,IAAP,CAAY,SAAZ;AACD,KAFD,MAEO,IAAI5C,KAAKyG,YAAL,KAAsB,CAA1B,EAA6B;AAClChE,aAAOG,IAAP,CAAY,aAAZ;AACD;;AAED,WAAOH,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,U,sBAAYf,I,EAAM;AACjB,QAAIA,KAAK0G,MAAL,IAAe,CAAnB,EAAsB;AACpB,aAAO,CAAE,GAAF,EAAO1G,KAAK0G,MAAZ,EAAqB3F,IAArB,CAA0B,EAA1B,CAAP;AACD;AACD,WAAO,GAAP;AACD,G;;qBAEA,e,2BAAiBf,I,EAAM;AACtB,QAAMyC,SAAS,EAAf;;AAEA,QAAIzC,KAAK2G,OAAT,EAAkB;AAChBlE,aAAOG,IAAP,CAAY,SAAZ;AACD;;AAED,QAAMgE,QAAQ,EAAd;;AAEA,SAAK,IAAIlD,IAAI,CAAb,EAAgBA,IAAI1D,KAAK6G,SAAL,CAAehH,MAAnC,EAA2C6D,GAA3C,EAAgD;AAC9C,UAAMoD,WAAW9G,KAAK6G,SAAL,CAAenD,CAAf,CAAjB;AACA,UAAM0B,OAAO,CAAE,KAAK1E,OAAL,CAAaoG,SAAS,CAAT,CAAb,CAAF,CAAb;;AAEA,UAAIA,SAAS,CAAT,KAAeA,SAAS,CAAT,EAAYjH,MAA/B,EAAuC;AACrCuF,aAAKxC,IAAL,CAAU,kBAAO,SAAP,EAAkB,KAAK1B,IAAL,CAAU4F,SAAS,CAAT,CAAV,CAAlB,CAAV;AACD;;AAEDF,YAAMhE,IAAN,CAAWwC,KAAKrE,IAAL,CAAU,GAAV,CAAX;AACD;;AAED,QAAMgG,QAAQH,MAAM7F,IAAN,CAAW,IAAX,CAAd;;AAEA,QAAIf,KAAKgH,WAAT,EAAsB;AACpBvE,aAAOG,IAAP,iBAA0BmE,KAA1B;AACD,KAFD,MAEO;AACLtE,aAAOG,IAAP,CAAYmE,KAAZ;AACD;;AAED,QAAI/G,KAAKiH,UAAT,EAAqB;AACnBxE,aAAOG,IAAP,CAAY,iBAAZ;AACD;;AAED,QAAI5C,KAAKmG,KAAT,EAAgB;AACd1D,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKmG,KAAlB,CAAZ;AACD;;AAED,QAAInG,KAAKkH,UAAT,EAAqB;AACnB,UAAMC,UAAU,KAAKjG,IAAL,CAAUlB,KAAKkH,UAAf,CAAhB;;AAEA,UAAI,CAAClH,KAAKmG,KAAV,EAAiB;AACf1D,eAAOG,IAAP,WAAoBuE,OAApB;AACD,OAFD,MAEO;AACL1E,eAAOG,IAAP,OAAgBuE,OAAhB;AACD;AACF;;AAED,WAAO1E,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,gB,4BAAkBf,I,EAAMsC,O,EAAS;AAChC,QAAIG,SAAS,EAAb;;AAEA,QAAIzC,KAAK2G,OAAT,EAAkB;AAChBlE,gBAAU,UAAV;AACD;;AAEDA,cAAUrC,OAAO,KAAKM,OAAL,CAAaV,KAAKoH,QAAlB,CAAP,CAAV;;AAEA,QAAIpH,KAAKmG,KAAT,EAAgB;AACd,aAAO1D,SAAS,GAAT,GAAe,KAAK/B,OAAL,CAAaV,KAAKmG,KAAlB,CAAtB;AACD;;AAED,WAAO1D,MAAP;AACD,G;;qBAEA,kB,8BAAoBzC,I,EAAM;AACzB,QAAMyC,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKqH,QAAlB,CAAZ;AACA5E,WAAOG,IAAP,CAAY,aAAZ;AACAH,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKsH,MAAL,CAAY,CAAZ,CAAb,CAAZ;;AAEA,QAAItH,KAAK8B,IAAT,EAAe;AACbW,aAAOG,IAAP,CAAYxC,OAAO,KAAKc,IAAL,CAAUlB,KAAK8B,IAAf,CAAP,CAAZ;AACD;;AAED,QAAI9B,KAAKuH,UAAT,EAAqB;AACnB9E,aAAOG,IAAP,CAAY,gBAAgB,KAAKlC,OAAL,CAAaV,KAAKuH,UAAlB,CAAhB,GAAgD,GAA5D;AACD;;AAED,WAAO9E,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,U,sBAAYf,I,EAAMsC,O,EAAS;AAC1B,QAAMG,SAAS,EAAf;;AAEA,QAAIzC,KAAKwH,MAAL,KAAgB,CAApB,EAAuB;AACrB/E,aAAOG,IAAP,CAAY,MAAZ;AACD;;AAED,QAAI5C,KAAKyH,cAAL,KAAwB,GAA5B,EAAiC;AAC/BhF,aAAOG,IAAP,CAAY,UAAZ;AACD;;AAED,QAAI5C,KAAKyH,cAAL,KAAwB,GAA5B,EAAiC;AAC/BhF,aAAOG,IAAP,CAAY,WAAZ;AACD;;AAED,QAAI5C,KAAK0H,UAAL,IAAmB,IAAvB,EAA6B;AAC3BjF,aAAOG,IAAP,CAAY,KAAKxB,KAAL,CAAWpB,KAAK0H,UAAhB,CAAZ;AACAjF,aAAOG,IAAP,CAAY,GAAZ;AACD;;AAEDH,WAAOG,IAAP,CAAY,KAAKxB,KAAL,CAAWpB,KAAK2H,OAAhB,CAAZ;;AAEA,QAAI3H,KAAKmG,KAAT,EAAgB;AACd1D,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKmG,KAAlB,CAAZ;AACD;;AAED,WAAO1D,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,W,uBAAaf,I,EAAMsC,O,EAAS;AAC3B,QAAIA,YAAY,QAAhB,EAA0B;AACxB,aAAO9C,QAAQ,CAAE,KAAKkB,OAAL,CAAaV,KAAKsD,GAAlB,CAAF,EAA0B,KAAKlC,KAAL,CAAWpB,KAAK+B,IAAhB,CAA1B,CAAR,EAA2DhB,IAA3D,CAAgE,MAAhE,CAAP;AACD,KAFD,MAEO,IAAIuB,YAAY,QAAhB,EAA0B;AAC/B,aAAO9C,QAAQ,CAAEQ,KAAK+B,IAAP,EAAa,KAAKrB,OAAL,CAAaV,KAAKsD,GAAlB,CAAb,CAAR,EAA+CvC,IAA/C,CAAoD,KAApD,CAAP;AACD,KAFM,MAEA,IAAI,EAAEf,KAAKsD,GAAL,IAAY,IAAd,CAAJ,EAAyB;AAC9B,aAAO,KAAKlC,KAAL,CAAWpB,KAAK+B,IAAhB,CAAP;AACD;;AAED,WAAOjC,KAAK,WAAL,EAAkBE,IAAlB,CAAP;AACD,G;;qBAEA,S,qBAAWA,I,EAAM;AAChB,QAAIA,KAAK4H,UAAL,KAAoB,CAAxB,EAA2B;AACzB,aAAOxH,OAAO,KAAKc,IAAL,CAAUlB,KAAK8B,IAAf,CAAP,CAAP;AACD;;AAED,WAAO,kBAAO,SAAP,EAAkB,KAAKZ,IAAL,CAAUlB,KAAK8B,IAAf,CAAlB,CAAP;AACD,G;;qBAEA,Y,wBAAc9B,I,EAAMsC,O,EAAS;AAAA;;AAC5B,QAAMG,SAAS,EAAf;;AAEA,QAAIzC,KAAK6H,UAAT,EAAqB;AACnBpF,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAK6H,UAAlB,CAAZ;AACD;;AAED,QAAI7H,KAAKgD,EAAL,KAAY,CAAhB,EAAmB;AACjB;AACA,UAAIhD,KAAK8H,WAAL,IAAoB,IAAxB,EAA8B;AAC5BrF,eAAOG,IAAP,CAAY,QAAZ;AACD;AACF,KALD,MAKO;AACLH,aAAOG,IAAP,CAAYxC,OAAO,KAAKM,OAAL,CAAaV,KAAK4F,IAAlB,CAAP,CAAZ;;AAEA,UAAMmC,OAAO,CACX,MADW,EAEX,OAFW,EAGX,WAHW,EAIX,QAJW,CAAb;;AAOAtF,aAAOG,IAAP,CAAYmF,KAAK/H,KAAKgD,EAAV,CAAZ;;AAEA,UAAIhD,KAAKgI,GAAT,EAAc;AACZvF,eAAOG,IAAP,CAAY,KAAZ;AACD;;AAEDH,aAAOG,IAAP,CAAYxC,OAAO,KAAKM,OAAL,CAAaV,KAAKiG,IAAlB,CAAP,CAAZ;AACD;;AAED,QAAIjG,KAAKiI,cAAT,EAAyB;AACvB,UAAIjI,KAAKiI,cAAL,CAAoB,CAApB,KAA0B,IAA9B,EAAoC;AAClCxF,eAAOG,IAAP,CAAY,aAAZ;;AAEA,YAAMsF,SAAUlI,KAAKiI,cAAL,CAAoBnH,GAApB,CAAwB;AAAA,iBAAK,OAAKJ,OAAL,CAAayH,CAAb,EAAgB,QAAhB,CAAL;AAAA,SAAxB,CAAD,CAA0DpH,IAA1D,CAA+D,KAA/D,CAAf;;AAEA0B,eAAOG,IAAP,OAAgBsF,MAAhB;AACD,OAND,MAMO;AACLzF,eAAOG,IAAP,CAAY,UAAZ;AACD;AACF;;AAED,QAAI5C,KAAKoI,UAAT,EAAqB;AACnB3F,aAAOG,IAAP,CAAYtC,OAAQN,KAAKoI,UAAL,CAAgBtH,GAAhB,CAAoB;AAAA,eAAK,OAAKJ,OAAL,CAAayH,CAAb,EAAgB,QAAhB,CAAL;AAAA,OAApB,CAAD,CAAsDpH,IAAtD,CAA2D,KAA3D,CAAP,CAAZ;AACD;;AAED,QAAIf,KAAKqI,UAAT,EAAqB;AACnB5F,aAAOG,IAAP,CAAY,MAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAO,KAAKI,OAAL,CAAaV,KAAKqI,UAAlB,CAAP,CAAZ;AACD;;AAED,QAAIrI,KAAKsI,UAAT,EAAqB;AACnB7F,aAAOG,IAAP,CAAY,MAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAQN,KAAKsI,UAAL,CAAgBxH,GAAhB,CAAoB;AAAA,eAAK,OAAKJ,OAAL,CAAayH,CAAb,EAAgB,MAAhB,CAAL;AAAA,OAApB,CAAD,CAAoDpH,IAApD,CAAyD,KAAzD,CAAP,CAAZ;AACD;;AAED,QAAIf,KAAKuI,WAAT,EAAsB;AACpB9F,aAAOG,IAAP,CAAY,OAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAO,KAAKI,OAAL,CAAaV,KAAKuI,WAAlB,CAAP,CAAZ;AACD;;AAED,QAAIvI,KAAK8H,WAAT,EAAsB;AACpBrF,aAAOG,IAAP,CAAY,QAAZ;;AAEA,UAAM4F,QAAQxI,KAAK8H,WAAL,CAAiBhH,GAAjB,CAAqB,gBAAQ;AACzC,qBAAYI,KAAKJ,GAAL,CAAS;AAAA,iBAAK,OAAKJ,OAAL,CAAa+H,CAAb,CAAL;AAAA,SAAT,CAAD,CAAiC1H,IAAjC,CAAsC,IAAtC,CAAX;AACD,OAFa,CAAd;;AAIA0B,aAAOG,IAAP,CAAY4F,MAAMzH,IAAN,CAAW,IAAX,CAAZ;AACD;;AAED,QAAIf,KAAK0I,WAAT,EAAsB;AACpBjG,aAAOG,IAAP,CAAY,UAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAQN,KAAK0I,WAAL,CAAiB5H,GAAjB,CAAqB;AAAA,eAAK,OAAKJ,OAAL,CAAayH,CAAb,EAAgB,OAAhB,CAAL;AAAA,OAArB,CAAD,CAAsDpH,IAAtD,CAA2D,KAA3D,CAAP,CAAZ;AACD;;AAED,QAAIf,KAAK2I,YAAT,EAAuB;AACrBlG,aAAOG,IAAP,CAAY,QAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAO,KAAKI,OAAL,CAAaV,KAAK2I,YAAlB,CAAP,CAAZ;AACD;;AAED,QAAI3I,KAAK4I,YAAT,EAAuB;AACrBnG,aAAOG,IAAP,CAAY,QAAZ;;AAEA,UAAMiG,UAAU,EAAhB;;AAEA,WAAK,IAAInF,IAAI,CAAb,EAAgBA,IAAI1D,KAAK4I,YAAL,CAAkB/I,MAAtC,EAA8C6D,GAA9C,EAAmD;AACjD,YAAMoF,IAAI9I,KAAK4I,YAAL,CAAkBlF,CAAlB,CAAV;AACA,YAAMqF,SAAS,EAAf;;AAEA,YAAID,EAAEE,SAAF,CAAYjH,IAAhB,EAAsB;AACpBgH,iBAAOnG,IAAP,CAAY,KAAKxB,KAAL,CAAW0H,EAAEE,SAAF,CAAYjH,IAAvB,IAA+B,KAA3C;AACD;;AAEDgH,eAAOnG,IAAP,CAAYxC,OAAO,KAAKM,OAAL,CAAaoI,CAAb,EAAgB,QAAhB,CAAP,CAAZ;;AAEAD,gBAAQjG,IAAR,CAAamG,OAAOhI,IAAP,CAAY,GAAZ,CAAb;AACD;;AAED0B,aAAOG,IAAP,CAAYiG,QAAQ9H,IAAR,CAAa,IAAb,CAAZ;AACD;;AAED,QAAIf,KAAKiJ,UAAT,EAAqB;AACnBxG,aAAOG,IAAP,CAAY,UAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAQN,KAAKiJ,UAAL,CAAgBnI,GAAhB,CAAoB;AAAA,eAAK,OAAKJ,OAAL,CAAayH,CAAb,EAAgB,MAAhB,CAAL;AAAA,OAApB,CAAD,CAAoDpH,IAApD,CAAyD,KAAzD,CAAP,CAAZ;AACD;;AAED,QAAIf,KAAKkJ,UAAT,EAAqB;AACnBzG,aAAOG,IAAP,CAAY,OAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAO,KAAKI,OAAL,CAAaV,KAAKkJ,UAAlB,CAAP,CAAZ;AACD;;AAED,QAAIlJ,KAAKmJ,WAAT,EAAsB;AACpB1G,aAAOG,IAAP,CAAY,QAAZ;AACAH,aAAOG,IAAP,CAAYtC,OAAO,KAAKI,OAAL,CAAaV,KAAKmJ,WAAlB,CAAP,CAAZ;AACD;;AAED,QAAInJ,KAAKoJ,aAAT,EAAwB;AACtBpJ,WAAKoJ,aAAL,CAAmBC,OAAnB,CAA2B,gBAAQ;AACjC,eAAO5G,OAAOG,IAAP,CAAY,OAAKlC,OAAL,CAAa2B,IAAb,CAAZ,CAAP;AACD,OAFD;AAGD;;AAED,WAAOI,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,Q,oBAAUf,I,EAAM;AACf,QAAMyC,SAAS,EAAf;;AAEAA,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKA,IAAlB,CAAZ;;AAEA,QAAIA,KAAKsJ,UAAL,KAAoB,CAAxB,EAA2B;AACzB7G,aAAOG,IAAP,CAAY,KAAZ;AACD;;AAED,QAAI5C,KAAKsJ,UAAL,KAAoB,CAAxB,EAA2B;AACzB7G,aAAOG,IAAP,CAAY,MAAZ;AACD;;AAED,QAAI5C,KAAKsJ,UAAL,KAAoB,CAAxB,EAA2B;AACzB7G,aAAOG,IAAP,YAAqB,KAAK5B,YAAL,CAAkBhB,KAAKuJ,KAAvB,CAArB;AACD;;AAED,QAAIvJ,KAAKwJ,YAAL,KAAsB,CAA1B,EAA6B;AAC3B/G,aAAOG,IAAP,CAAY,aAAZ;AACD;;AAED,QAAI5C,KAAKwJ,YAAL,KAAsB,CAA1B,EAA6B;AAC3B/G,aAAOG,IAAP,CAAY,YAAZ;AACD;;AAED,WAAOH,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,Q,oBAAUf,I,EAAM;AACf,WAAOA,KAAKmC,GAAZ;AACD,G;;qBAEA,S,qBAAWnC,I,EAAM;AAChB,YAAQ,IAAR;AACE,WAAKA,KAAKyJ,WAAL,KAAqB,CAA1B;AACE,eAAO,kBAAO,aAAP,EAAsB,KAAK/I,OAAL,CAAaV,KAAK0J,SAAlB,CAAtB,CAAP;AACF,WAAK1J,KAAKyJ,WAAL,KAAqB,CAA1B;AACE,eAAO,kBAAO,gBAAP,EAAyB,KAAK/I,OAAL,CAAaV,KAAK2J,QAAlB,CAAzB,EAAsD,KAAKjJ,OAAL,CAAaV,KAAK4J,QAAL,CAAc,CAAd,CAAb,CAAtD,EAAsF,KAAKlJ,OAAL,CAAaV,KAAK0J,SAAlB,CAAtF,CAAP;AACF,WAAK1J,KAAKyJ,WAAL,KAAqB,CAArB,IAA0B,EAAEzJ,KAAK4J,QAAL,IAAiB,IAAnB,CAA/B;AACE,eAAO,kBAAO,YAAP,EAAqB,KAAKlJ,OAAL,CAAaV,KAAK2J,QAAlB,CAArB,EAAkD,KAAKjJ,OAAL,CAAaV,KAAK0J,SAAlB,CAAlD,CAAP;AACF,WAAK1J,KAAKyJ,WAAL,KAAqB,CAA1B;AACE,eAAO,kBAAO,gBAAP,EAAyB,KAAK/I,OAAL,CAAaV,KAAK2J,QAAlB,CAAzB,EAAsD,KAAKjJ,OAAL,CAAaV,KAAK4J,QAAL,CAAc,CAAd,CAAb,CAAtD,EAAsF,KAAKlJ,OAAL,CAAaV,KAAK0J,SAAlB,CAAtF,CAAP;AACF,WAAK1J,KAAKyJ,WAAL,KAAqB,CAA1B;AACE,eAAO,kBAAO,YAAP,EAAqB,KAAK/I,OAAL,CAAaV,KAAK2J,QAAlB,CAArB,EAAkD,KAAKjJ,OAAL,CAAaV,KAAK4J,QAAL,CAAc,CAAd,CAAb,CAAlD,EAAkF,KAAKlJ,OAAL,CAAaV,KAAK0J,SAAlB,CAAlF,CAAP;AACF,WAAK1J,KAAKyJ,WAAL,KAAqB,CAA1B;AACE,eAAO,kBAAO,MAAP,EAAe,KAAK/I,OAAL,CAAaV,KAAK0J,SAAlB,CAAf,CAAP;AACF,WAAK1J,KAAKyJ,WAAL,KAAqB,CAA1B;AACE;AACA,eAAO3J,KAAK,SAAL,EAAgBE,IAAhB,CAAP;AACA;AACA;AACF,WAAKA,KAAKyJ,WAAL,KAAqB,CAA1B;AACE,eAAO,kBAAO,YAAP,EAAqB,KAAK/I,OAAL,CAAaV,KAAK0J,SAAlB,CAArB,CAAP;AACF;AACE,eAAO5J,KAAK,SAAL,EAAgBE,IAAhB,CAAP;AArBJ;AAuBD,G;;qBAEA,U,sBAAYA,I,EAAM;AACjB,WAAO,KAAKU,OAAL,CAAaV,KAAKyD,GAAlB,IAAyB,IAAzB,GAAgC,KAAK/C,OAAL,CAAaV,KAAK2B,QAAlB,CAAvC;AACD,G;;qBAEA,U,sBAAY3B,I,EAAM;AAAA;;AACjB,QAAI,iBAAE6J,IAAF,CAAO7J,KAAK6B,KAAZ,EAAmBK,MAAnB,CAA0BC,GAA1B,KAAkC,UAAtC,EAAkD;AAChD,aAAO,KAAK2H,eAAL,CAAqB9J,IAArB,CAAP;AACD;;AAED,QAAMyC,SAAS,EAAf;;AAEA,QAAIzC,KAAK+J,KAAT,EAAgB;AACdtH,aAAOG,IAAP,CAAY,OAAZ;AACD;;AAED,QAAId,OAAO,IAAX;;AAEA,QAAI9B,KAAKgK,OAAL,IAAgB,IAApB,EAA0B;AACxBlI,aAAO9B,KAAKgK,OAAL,CAAalJ,GAAb,CAAiB,gBAAQ;AAC9B,eAAO,OAAKJ,OAAL,CAAa2B,IAAb,CAAP;AACD,OAFM,CAAP;AAGD;;AAED,QAAMtC,OAAO,EAAb;;AAEAA,SAAK6C,IAAL,CAAU,KAAK7C,IAAL,CAAUC,KAAK6B,KAAf,EAAsBC,QAAQA,KAAKf,IAAL,CAAU,IAAV,CAA9B,CAAV;;AAEA,QAAIf,KAAKiK,WAAL,IAAoB,IAAxB,EAA8B;AAC5BlK,WAAK6C,IAAL,CAAU,IAAV;AACD;;AAEDH,WAAOG,IAAP,CAAY7C,KAAKgB,IAAL,CAAU,EAAV,CAAZ;;AAEA,WAAO0B,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,U,sBAAYf,I,EAAM;AACjB,QAAMyC,SAAS,CAAE,MAAF,CAAf;;AAEAA,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKkK,IAAlB,CAAZ;AACAzH,WAAOG,IAAP,CAAY,MAAZ;AACAH,WAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaV,KAAKmK,MAAlB,CAAZ;;AAEA,WAAO1H,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEA,W,uBAAaf,I,EAAMsC,O,EAAS;AAAA;;AAC3B,QAAMG,SAAS,EAAf;;AAEA,QAAIH,YAAY,QAAhB,EAA0B;AACxB,UAAItC,KAAK+B,IAAT,EAAe;AACbU,eAAOG,IAAP,CAAY5C,KAAK+B,IAAjB;AACD;AACF;;AAED,QAAMqI,QAAS,EAAEpK,KAAKqK,eAAL,IAAwB,IAA1B,KAAmC,EAAErK,KAAKsK,WAAL,IAAoB,IAAtB,CAAlD;;AAEA,QAAMC,eAAe,KAAKC,mBAAL,CAAyBxK,KAAKuK,YAA9B,EAA4CvK,KAAKyK,OAAjD,EAA0DzK,KAAK0K,WAA/D,EAA4E1K,KAAK2K,SAAjF,CAArB;;AAEA,QAAIP,SAAS9H,YAAY,QAArB,IAAiC,EAAEtC,KAAK+B,IAAL,IAAa,IAAf,CAAjC,IAAyDwI,aAAa1K,MAAb,KAAwB,CAArF,EAAwF;AACtF,aAAO,IAAP;AACD;;AAED,QAAM+K,cAAc,EAApB;;AAEA,QAAIC,YAAY,KAAhB;;AAEA,QAAI7K,KAAKqK,eAAT,EAA0B;AACxB,UAAMS,YAAY,CAAE,cAAF,CAAlB;;AAEA,UAAM5C,SAASlI,KAAKqK,eAAL,CAAqBvJ,GAArB,CAAyB;AAAA,eAAQ,OAAKJ,OAAL,CAAa2B,IAAb,CAAR;AAAA,OAAzB,CAAf;;AAEAyI,gBAAUlI,IAAV,CAAesF,OAAOnH,IAAP,CAAY,IAAZ,CAAf;;AAEA6J,kBAAYhI,IAAZ,CAAiBkI,UAAU/J,IAAV,CAAe,GAAf,CAAjB;AACA8J,kBAAY,IAAZ;AACD;;AAED,QAAI7K,KAAKsK,WAAT,EAAsB;AACpBM,kBAAYhI,IAAZ,CAAiB,UAAjB;;AAEA,UAAMmI,SAAS/K,KAAKsK,WAAL,CAAiBxJ,GAAjB,CAAqB,gBAAQ;AAC1C,eAAO,OAAKJ,OAAL,CAAa2B,IAAb,CAAP;AACD,OAFc,CAAf;;AAIAuI,kBAAYhI,IAAZ,CAAiBmI,OAAOhK,IAAP,CAAY,IAAZ,CAAjB;;AAEA8J,kBAAY,IAAZ;AACD;;AAED,QAAIN,aAAa1K,MAAjB,EAAyB;AACvBgL,kBAAY,IAAZ;AACAD,kBAAYhI,IAAZ,CAAiB2H,YAAjB;AACD;;AAED,QAAIM,aAAavI,YAAY,QAA7B,EAAuC;AACrC,aAAOG,OAAO1B,IAAP,CAAY,GAAZ,IAAmB,IAAnB,GAA0B6J,YAAY7J,IAAZ,CAAiB,GAAjB,CAA1B,GAAkD,GAAzD;AACD;;AAED,WAAO0B,OAAO1B,IAAP,CAAY,GAAZ,IAAmB6J,YAAY7J,IAAZ,CAAiB,GAAjB,CAA1B;AACD,G;;qBAEA,Y,wBAAcf,I,EAAM;AACnB,QAAMyC,SAAS,CAAE,MAAF,CAAf;;AAEA,QAAIzC,KAAKgL,SAAT,EAAoB;AAClBvI,aAAOG,IAAP,CAAY,WAAZ;AACD;;AAEDH,WAAOG,IAAP,CAAY,KAAK1B,IAAL,CAAUlB,KAAKiL,IAAf,CAAZ;;AAEA,WAAOxI,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAEDyJ,mB,gCAAoBU,O,EAASC,O,EAAST,W,EAAaC,S,EAAW;AAC5D,QAAMS,yBAAyB,OAA/B,CAD4D,CACpB;AACxC,QAAMC,oBAAoB,OAA1B,CAF4D,CAEzB;AACnC,QAAMC,mBAAmB,OAAzB,CAH4D,CAG1B;AAClC,QAAMC,sBAAsB,OAA5B,CAJ4D,CAIvB;AACrC,QAAMC,wCAAwC,OAA9C,CAL4D,CAKL;AACvD,QAAMC,sCAAsC,OAA5C,CAN4D,CAMP;AACrD,QAAMC,wCAAwC,OAA9C,CAP4D,CAOL;AACvD,QAAMC,sCAAsC,OAA5C,CAR4D,CAQP;AACrD,QAAMC,gCAAgC,OAAtC,CAT4D,CASb;AAC/C,QAAMC,8BAA8B,OAApC,CAV4D,CAUf;AAC7C,QAAMC,oCAAoC,OAA1C,CAX4D,CAWT;AACnD,QAAMC,kCAAkC,OAAxC,CAZ4D,CAYX;AACjD,QAAMC,oCAAoC,OAA1C,CAb4D,CAaT;AACnD,QAAMC,kCAAkC,OAAxC,CAd4D,CAcX;;AAEjD,QAAI,EAAEf,UAAUE,sBAAZ,CAAJ,EAAyC;AACvC,aAAO,EAAP;AACD;;AAED,QAAM3I,SAAS,EAAf;;AAEA,QAAI0I,WAAW,IAAf,EAAqB;AACnB1I,aAAOG,IAAP,CAAYuI,OAAZ;AACD;;AAED,QAAID,UAAUG,iBAAd,EAAiC;AAC/B5I,aAAOG,IAAP,CAAY,OAAZ;AACD;;AAED,QAAIsI,UAAUI,gBAAd,EAAgC;AAC9B7I,aAAOG,IAAP,CAAY,MAAZ;AACD;;AAED,QAAMsJ,UAAUhB,UAAUK,mBAA1B;;AAEA,QAAIW,OAAJ,EAAa;AACXzJ,aAAOG,IAAP,CAAY,SAAZ;AACD;;AAED,QAAIsI,UAAUM,qCAAd,EAAqD;AACnD/I,aAAOG,IAAP,CAAY,qBAAZ;AACD;;AAED,QAAIsI,UAAUQ,qCAAd,EAAqD;AACnDjJ,aAAOG,IAAP,CAAY,qBAAZ;AACD;;AAED,QAAIsI,UAAUU,6BAAd,EAA6C;AAC3CnJ,aAAOG,IAAP,CAAY,aAAZ;AACD;;AAED,QAAIsI,UAAUY,iCAAd,EAAiD;AAC/CrJ,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAagK,WAAb,IAA4B,YAAxC;AACD;;AAED,QAAIQ,UAAUc,iCAAd,EAAiD;AAC/CvJ,aAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAagK,WAAb,IAA4B,YAAxC;AACD;;AAED,QAAIwB,OAAJ,EAAa;AACXzJ,aAAOG,IAAP,CAAY,KAAZ;;AAEA,UAAIsI,UAAUO,mCAAd,EAAmD;AACjDhJ,eAAOG,IAAP,CAAY,qBAAZ;AACD;;AAED,UAAIsI,UAAUS,mCAAd,EAAmD;AACjDlJ,eAAOG,IAAP,CAAY,qBAAZ;AACD;;AAED,UAAIsI,UAAUW,2BAAd,EAA2C;AACzCpJ,eAAOG,IAAP,CAAY,aAAZ;AACD;;AAED,UAAIsI,UAAUa,+BAAd,EAA+C;AAC7CtJ,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaiK,SAAb,IAA0B,YAAtC;AACD;;AAED,UAAIO,UAAUe,+BAAd,EAA+C;AAC7CxJ,eAAOG,IAAP,CAAY,KAAKlC,OAAL,CAAaiK,SAAb,IAA0B,YAAtC;AACD;AACF;;AAED,WAAOlI,OAAO1B,IAAP,CAAY,GAAZ,CAAP;AACD,G;;qBAED+I,e,4BAAgB9J,I,EAAM;AAAA;;AACpB,QAAMD,OAAO,CAAE,UAAF,CAAb;;AAEA,QAAIC,KAAKiK,WAAL,IAAoB,IAAxB,EAA8B;AAC5BlK,WAAK6C,IAAL,CAAU,IAAV;AACD;;AAED,QAAI5C,KAAKgK,OAAT,EAAkB;AAAA;AAChB,YAAMA,UAAUhK,KAAKgK,OAAL,CAAalJ,GAAb,CAAiB;AAAA,iBAAQ,QAAKJ,OAAL,CAAa2B,IAAb,CAAR;AAAA,SAAjB,CAAhB;;AAEA,YAAI8J,YAAY,QAAKC,QAAL,CAAcpC,QAAQ,CAAR,CAAd,CAAhB;;AAEA;AACA,YAAIhK,KAAKgK,OAAL,CAAa,CAAb,KAAmBhK,KAAKgK,OAAL,CAAa,CAAb,EAAgBqC,OAAnC,IAA8CrM,KAAKgK,OAAL,CAAa,CAAb,EAAgBqC,OAAhB,CAAwB/I,GAAxB,CAA4BgJ,OAA5B,CAAoC5G,IAApC,KAA6C,KAA3F,IAAoG1F,KAAKgK,OAAL,CAAa,CAAb,CAApG,IAAwHhK,KAAKgK,OAAL,CAAa,CAAb,EAAgBqC,OAAhB,IAA2B,IAAvJ,EAA8J;AAC5JF,sBAAY,OAAMnM,KAAKgK,OAAL,CAAa,CAAb,EAAgBqC,OAAhB,CAAwB/I,GAAxB,CAA4BgJ,OAA5B,CAAoC5G,IAA1C,OAAZ;AACD,SAFD,MAEO;AACLyG,sBAAYA,UAAUrL,GAAV,CAAc,gBAAQ;AAChC,gBAAIyL,SAAS,QAAT,IAAqBvC,QAAQnK,MAAR,KAAmB,CAA5C,EAA+C;AAC7C,qBAAO,YAAY,iBAAEgK,IAAF,CAAOG,OAAP,CAAZ,GAA8B,GAArC;AACD;;AAED,mBAAOuC,IAAP;AACD,WANW,CAAZ;AAOD;;AAEDxM,aAAK6C,IAAL,CAAUuJ,UAAUpL,IAAV,CAAe,MAAf,CAAV;AAlBgB;AAmBjB;;AAED,WAAOhB,KAAKgB,IAAL,CAAU,GAAV,CAAP;AACD,G;;qBAEDqL,Q,qBAASI,I,EAAM;AACb;AACA,QAAI,KAAKC,KAAL,IAAc,IAAlB,EAAwB;AACtB,WAAKA,KAAL,GAAa;AACX,WAAG,QADQ;AAEX,WAAG,OAFQ;AAGX,WAAG,MAHQ;AAIX,WAAG,KAJQ;AAKX,WAAG,QALQ;AAMX,WAAG,IANQ;AAOX,WAAG,KAPQ;AAQX,WAAG,OARQ;AASX,WAAG,YATQ;AAUX,WAAG,MAVQ;AAWX,YAAI,MAXO;AAYX,YAAI,QAZO;AAaX,YAAI,QAbO;AAcX,YAAI,aAdO;AAeX,YAAI,aAfO;AAgBX,YAAI,KAhBO;AAiBX,YAAI,KAjBO;AAkBX,YAAI,OAlBO;AAmBX,YAAI,MAnBO;AAoBX,YAAI,KApBO;AAqBX,YAAI,YArBO;AAsBX,YAAI,WAtBO;AAuBX,YAAI,SAvBO;AAwBX,YAAI,SAxBO;AAyBX,YAAI,MAzBO;AA0BX,YAAI,QA1BO;AA2BX,YAAI,SA3BO;AA4BX,YAAI,YA5BO;AA6BX,YAAI;AA7BO,OAAb;AA+BD;;AAED,QAAI,KAAKC,IAAL,IAAa,IAAjB,EAAuB;AACrB,WAAKA,IAAL,GAAY,iBAAEC,MAAF,CAAS,KAAKF,KAAd,CAAZ;AACD;;AAED,QAAI,KAAKG,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,WAAKA,SAAL,GAAiB,EAAjB;AACA,WAAKA,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUG,IAA/B,IAAwC,CAAE,MAAF,CAAxC;AACA,WAAKD,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUI,KAA/B,IAAyC,CAAE,OAAF,CAAzC;AACA,WAAKF,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUK,GAA/B,IAAuC,CAAE,KAAF,CAAvC;AACA,WAAKH,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUM,IAA/B,IAAwC,CAAE,MAAF,CAAxC;AACA,WAAKJ,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUO,MAA/B,IAA0C,CAAE,QAAF,CAA1C;AACA,WAAKL,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUQ,MAA/B,IAA0C,CAAE,QAAF,CAA1C;AACA,WAAKN,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUG,IAAf,GAAsB,KAAK,KAAKH,IAAL,CAAUI,KAArD,IAA+D,CAAE,MAAF,EAAU,OAAV,CAA/D;AACA,WAAKF,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUK,GAAf,GAAqB,KAAK,KAAKL,IAAL,CAAUM,IAApD,IAA6D,CAAE,KAAF,EAAS,MAAT,CAA7D;AACA,WAAKJ,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUK,GAAf,GAAqB,KAAK,KAAKL,IAAL,CAAUM,IAApC,GAA2C,KAAK,KAAKN,IAAL,CAAUO,MAA1E,IAAqF,CAAE,KAAF,EAAS,QAAT,CAArF;AACA,WAAKL,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUK,GAAf,GAAqB,KAAK,KAAKL,IAAL,CAAUM,IAApC,GAA2C,KAAK,KAAKN,IAAL,CAAUO,MAA1D,GAAmE,KAAK,KAAKP,IAAL,CAAUQ,MAAlG,IAA6G,CAAE,KAAF,EAAS,QAAT,CAA7G;AACA,WAAKN,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUM,IAAf,GAAsB,KAAK,KAAKN,IAAL,CAAUO,MAArD,IAAgE,CAAE,MAAF,EAAU,QAAV,CAAhE;AACA,WAAKL,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUM,IAAf,GAAsB,KAAK,KAAKN,IAAL,CAAUO,MAArC,GAA8C,KAAK,KAAKP,IAAL,CAAUQ,MAA7E,IAAwF,CAAE,MAAF,EAAU,QAAV,CAAxF;AACA,WAAKN,SAAL,CAAgB,KAAK,KAAKF,IAAL,CAAUO,MAAf,GAAwB,KAAK,KAAKP,IAAL,CAAUQ,MAAvD,IAAkE,CAAE,QAAF,EAAY,QAAZ,CAAlE;;AAEA;AACA;AACA,WAAKN,SAAL,CAAe,KAAKO,mBAAL,GAA2B,OAA1C,IAAqD,EAArD;AACD;;AAED,WAAO,KAAKP,SAAL,CAAeJ,KAAK5M,QAAL,EAAf,CAAP;AACD,G;;;;;kBA1wCkBa,Q","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport { format } from 'util';\n\nconst { keys } = _;\n\nconst compact = o => {\n  return _.filter(_.compact(o), (p) => {\n    if (p == null) {\n      return false;\n    }\n\n    return p.toString().length;\n  });\n};\n\nconst fail = (type, node) => {\n  throw new Error(format('Unhandled %s node: %s', type, JSON.stringify(node)));\n};\n\nconst parens = (string) => {\n  return '(' + string + ')';\n};\n\nconst indent = (text, count = 1) => text;\n\nexport default class Deparser {\n  static deparse(query) {\n    return new Deparser(query).deparseQuery();\n  }\n\n  constructor(tree) {\n    this.tree = tree;\n  }\n\n  deparseQuery() {\n    return (this.tree.map(node => this.deparse(node))).join('\\n\\n');\n  }\n\n  deparseNodes(nodes) {\n    return nodes.map(node => this.deparse(node));\n  }\n\n  list(nodes, separator = ', ') {\n    if (!nodes) {\n      return '';\n    }\n\n    return this.deparseNodes(nodes).join(separator);\n  }\n\n  quote(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (_.isArray(value)) {\n      return value.map(o => this.quote(o));\n    }\n\n    return '\"' + value + '\"';\n  }\n\n  // SELECT encode(E'''123\\\\000\\\\001', 'base64')\n  escape(literal) {\n    return \"'\" + literal.replace(/'/g, \"''\") + \"'\";\n  }\n\n  convertTypeName(typeName, size) {\n    switch (typeName) {\n      case 'bpchar':\n        if (size != null) {\n          return 'char';\n        }\n        // return `pg_catalog.bpchar` below so that the following is symmetric\n        // SELECT char 'c' = char 'c' AS true\n        return 'pg_catalog.bpchar';\n      case 'varchar':\n        return 'varchar';\n      case 'numeric':\n        return 'numeric';\n      case 'bool':\n        return 'boolean';\n      case 'int2':\n        return 'smallint';\n      case 'int4':\n        return 'int';\n      case 'int8':\n        return 'bigint';\n      case 'real': case 'float4':\n        return 'real';\n      case 'float8':\n        return 'pg_catalog.float8';\n      case 'text':\n        // SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS True\n        return 'pg_catalog.text';\n      case 'date':\n        return 'pg_catalog.date';\n      case 'time':\n        return 'time';\n      case 'timetz':\n        return 'pg_catalog.timetz';\n      case 'timestamp':\n        return 'timestamp';\n      case 'timestamptz':\n        return 'pg_catalog.timestamptz';\n      case 'interval':\n        return 'interval';\n      case 'bit':\n        return 'bit';\n      default:\n        throw new Error(format('Unhandled data type: %s', typeName));\n    }\n  }\n\n  type(names, args) {\n    const [ catalog, type ] = names.map(name => this.deparse(name));\n\n    const mods = (name, size) => {\n      if (size != null) {\n        return name + '(' + size + ')';\n      }\n\n      return name;\n    };\n\n    // handle the special \"char\" (in quotes) type\n    if (names[0].String.str === 'char') {\n      names[0].String.str = '\"char\"';\n    }\n\n    if (catalog !== 'pg_catalog') {\n      return mods(this.list(names, '.'), args);\n    }\n\n    const res = this.convertTypeName(type, args);\n\n    return mods(res, args);\n  }\n\n  deparse(item, context) {\n    if (item == null) {\n      return null;\n    }\n\n    if (_.isNumber(item)) {\n      return item;\n    }\n\n    const type = keys(item)[0];\n    const node = _.values(item)[0];\n\n    if (this[type] == null) {\n      throw new Error(type + ' is not implemented');\n    }\n\n    return this[type](node, context);\n  }\n\n  ['A_Expr'](node, context) {\n    const output = [];\n\n    switch (node.kind) {\n      case 0: // AEXPR_OP\n        if (node.lexpr) {\n          output.push(parens(this.deparse(node.lexpr)));\n        }\n\n        if (node.name.length > 1) {\n          const schema = this.deparse(node.name[0]);\n          const operator = this.deparse(node.name[1]);\n          output.push(`OPERATOR(${schema}.${operator})`);\n        } else {\n          output.push(this.deparse(node.name[0]));\n        }\n\n        if (node.rexpr) {\n          output.push(parens(this.deparse(node.rexpr)));\n        }\n\n        if (output.length === 2) {\n          return parens(output.join(''));\n        }\n\n        return parens(output.join(' '));\n\n      case 1: // AEXPR_OP_ANY\n        output.push(this.deparse(node.lexpr));\n        output.push(format('ANY (%s)', this.deparse(node.rexpr)));\n        return output.join(` ${this.deparse(node.name[0])} `);\n\n      case 2: // AEXPR_OP_ALL\n        output.push(this.deparse(node.lexpr));\n        output.push(format('ALL (%s)', this.deparse(node.rexpr)));\n        return output.join(` ${this.deparse(node.name[0])} `);\n\n      case 3: // AEXPR_DISTINCT\n        return format('%s IS DISTINCT FROM %s', this.deparse(node.lexpr), this.deparse(node.rexpr));\n\n      case 4: // AEXPR_NULLIF\n        return format('NULLIF(%s, %s)', this.deparse(node.lexpr), this.deparse(node.rexpr));\n\n      case 5: { // AEXPR_OF\n        const op = node.name[0].String.str === '=' ? 'IS OF' : 'IS NOT OF';\n        return format('%s %s (%s)', this.deparse(node.lexpr), op, this.list(node.rexpr));\n      }\n\n      case 6: { // AEXPR_IN\n        const operator = node.name[0].String.str === '=' ? 'IN' : 'NOT IN';\n\n        return format('%s %s (%s)', this.deparse(node.lexpr), operator, this.list(node.rexpr));\n      }\n\n      case 7: // AEXPR_LIKE\n        output.push(this.deparse(node.lexpr));\n\n        if (node.name[0].String.str === '!~~') {\n          output.push(format('NOT LIKE (%s)', this.deparse(node.rexpr)));\n        } else {\n          output.push(format('LIKE (%s)', this.deparse(node.rexpr)));\n        }\n\n        return output.join(' ');\n\n      case 8: // AEXPR_ILIKE\n        output.push(this.deparse(node.lexpr));\n\n        if (node.name[0].String.str === '!~~*') {\n          output.push(format('NOT ILIKE (%s)', this.deparse(node.rexpr)));\n        } else {\n          output.push(format('ILIKE (%s)', this.deparse(node.rexpr)));\n        }\n\n        return output.join(' ');\n\n      case 9: // AEXPR_SIMILAR\n        // SIMILAR TO emits a similar_escape FuncCall node with the first argument\n        output.push(this.deparse(node.lexpr));\n\n        if (this.deparse(node.rexpr.FuncCall.args[1].Null)) {\n          output.push(format('SIMILAR TO %s', this.deparse(node.rexpr.FuncCall.args[0])));\n        } else {\n          output.push(format('SIMILAR TO %s ESCAPE %s',\n                             this.deparse(node.rexpr.FuncCall.args[0]),\n                             this.deparse(node.rexpr.FuncCall.args[1])));\n        }\n\n        return output.join(' ');\n\n      case 10: // AEXPR_BETWEEN TODO(zhm) untested\n        output.push(this.deparse(node.lexpr));\n        output.push(format('BETWEEN %s AND %s', this.deparse(node.rexpr[0]), this.deparse(node.rexpr[1])));\n        return output.join(' ');\n\n      case 11: // AEXPR_NOT_BETWEEN TODO(zhm) untested\n        output.push(this.deparse(node.lexpr));\n        output.push(format('NOT BETWEEN %s AND %s', this.deparse(node.rexpr[0]), this.deparse(node.rexpr[1])));\n        return output.join(' ');\n\n      default:\n        return fail('A_Expr', node);\n    }\n  }\n\n  ['Alias'](node, context) {\n    const name = node.aliasname;\n\n    const output = [ 'AS' ];\n\n    if (node.colnames) {\n      output.push(name + parens(this.list(node.colnames)));\n    } else {\n      output.push(this.quote(name));\n    }\n\n    return output.join(' ');\n  }\n\n  ['A_ArrayExpr'](node) {\n    return format('ARRAY[%s]', this.list(node.elements));\n  }\n\n  ['A_Const'](node, context) {\n    if (node.val.String) {\n      return this.escape(this.deparse(node.val));\n    }\n\n    return this.deparse(node.val);\n  }\n\n  ['A_Indices'](node) {\n    if (node.lidx) {\n      return format('[%s:%s]', this.deparse(node.lidx), this.deparse(node.uidx));\n    }\n\n    return format('[%s]', this.deparse(node.uidx));\n  }\n\n  ['A_Indirection'](node) {\n    const output = [ `(${this.deparse(node.arg)})` ];\n\n    // TODO(zhm) figure out the actual rules for when a '.' is needed\n    //\n    // select a.b[0] from a;\n    // select (select row(1)).*\n    // select c2[2].f2 from comptable\n    // select c2.a[2].f2[1].f3[0].a1 from comptable\n\n    for (let i = 0; i < node.indirection.length; i++) {\n      const subnode = node.indirection[i];\n\n      if (subnode.String || subnode.A_Star) {\n        const value = subnode.A_Star ? '*' : this.quote(subnode.String.str);\n\n        output.push(`.${value}`);\n      } else {\n        output.push(this.deparse(subnode));\n      }\n    }\n\n    return output.join('');\n  }\n\n  ['A_Star'](node, context) {\n    return '*';\n  }\n\n  ['BitString'](node) {\n    const prefix = node.str[0];\n    return `${prefix}'${node.str.substring(1)}'`;\n  }\n\n  ['BoolExpr'](node) {\n    switch (node.boolop) {\n      case 0:\n        return parens(this.list(node.args, ' AND '));\n      case 1:\n        return parens(this.list(node.args, ' OR '));\n      case 2:\n        return format('NOT (%s)', this.deparse(node.args[0]));\n      default:\n        return fail('BoolExpr', node);\n    }\n  }\n\n  ['BooleanTest'](node) {\n    const output = [];\n\n    output.push(this.deparse(node.arg));\n\n    const tests = [\n      'IS TRUE',\n      'IS NOT TRUE',\n      'IS FALSE',\n      'IS NOT FALSE',\n      'IS UNKNOWN',\n      'IS NOT UNKNOWN'\n    ];\n\n    output.push(tests[node.booltesttype]);\n\n    return output.join(' ');\n  }\n\n  ['CaseExpr'](node) {\n    const output = [ 'CASE' ];\n\n    if (node.arg) {\n      output.push(this.deparse(node.arg));\n    }\n\n    for (let i = 0; i < node.args.length; i++) {\n      output.push(this.deparse(node.args[i]));\n    }\n\n    if (node.defresult) {\n      output.push('ELSE');\n      output.push(this.deparse(node.defresult));\n    }\n\n    output.push('END');\n\n    return output.join(' ');\n  }\n\n  ['CoalesceExpr'](node) {\n    return format('COALESCE(%s)', this.list(node.args));\n  }\n\n  ['CollateClause'](node) {\n    const output = [];\n\n    if (node.arg) {\n      output.push(this.deparse(node.arg));\n    }\n\n    output.push('COLLATE');\n\n    if (node.collname) {\n      output.push(this.quote(this.deparseNodes(node.collname)));\n    }\n\n    return output.join(' ');\n  }\n\n  ['ColumnDef'](node) {\n    const output = [ this.quote(node.colname) ];\n\n    output.push(this.deparse(node.typeName));\n\n    if (node.raw_default) {\n      output.push('USING');\n      output.push(this.deparse(node.raw_default));\n    }\n\n    if (node.constraints) {\n      output.push(this.list(node.constraints, ' '));\n    }\n\n    return _.compact(output).join(' ');\n  }\n\n  ['ColumnRef'](node) {\n    const fields = node.fields.map(field => {\n      if (field.String) {\n        return this.quote(this.deparse(field));\n      }\n\n      return this.deparse(field);\n    });\n\n    return fields.join('.');\n  }\n\n  ['CommonTableExpr'](node) {\n    const output = [];\n\n    output.push(node.ctename);\n\n    if (node.aliascolnames) {\n      output.push(format('(%s)', this.quote(this.deparseNodes(node.aliascolnames))));\n    }\n\n    output.push(format('AS (%s)', this.deparse(node.ctequery)));\n\n    return output.join(' ');\n  }\n\n  ['Float'](node) {\n    // wrap negative numbers in parens, SELECT (-2147483648)::int4 * (-1)::int4\n    if (node.str[0] === '-') {\n      return `(${node.str})`;\n    }\n\n    return node.str;\n  }\n\n  ['FuncCall'](node, context) {\n    const output = [];\n\n    let params = [];\n\n    if (node.args) {\n      params = node.args.map(item => {\n        return this.deparse(item);\n      });\n    }\n\n    // COUNT(*)\n    if (node.agg_star) {\n      params.push('*');\n    }\n\n    const name = this.list(node.funcname, '.');\n\n    const order = [];\n\n    const withinGroup = node.agg_within_group;\n\n    if (node.agg_order) {\n      order.push('ORDER BY');\n      order.push(this.list(node.agg_order, ', '));\n    }\n\n    const call = [];\n\n    call.push(name + '(');\n\n    if (node.agg_distinct) {\n      call.push('DISTINCT ');\n    }\n\n    // prepend variadic before the last parameter\n    // SELECT CONCAT('|', VARIADIC ARRAY['1','2','3'])\n    if (node.func_variadic) {\n      params[params.length - 1] = 'VARIADIC ' + params[params.length - 1];\n    }\n\n    call.push(params.join(', '));\n\n    if (order.length && !withinGroup) {\n      call.push(' ');\n      call.push(order.join(' '));\n    }\n\n    call.push(')');\n\n    output.push(compact(call).join(''));\n\n    if (order.length && withinGroup) {\n      output.push('WITHIN GROUP');\n      output.push(parens(order.join(' ')));\n    }\n\n    if (node.agg_filter != null) {\n      output.push(format('FILTER (WHERE %s)', this.deparse(node.agg_filter)));\n    }\n\n    if (node.over != null) {\n      output.push(format('OVER %s', this.deparse(node.over)));\n    }\n\n    return output.join(' ');\n  }\n\n  ['GroupingFunc'](node) {\n    return 'GROUPING(' + this.list(node.args) + ')';\n  }\n\n  ['GroupingSet'](node) {\n    switch (node.kind) {\n      case 0: // GROUPING_SET_EMPTY\n        return '()';\n\n      case 1: // GROUPING_SET_SIMPLE\n        return fail('GroupingSet', node);\n\n      case 2: // GROUPING_SET_ROLLUP\n        return 'ROLLUP (' + this.list(node.content) + ')';\n\n      case 3: // GROUPING_SET_CUBE\n        return 'CUBE (' + this.list(node.content) + ')';\n\n      case 4: // GROUPING_SET_SETS\n        return 'GROUPING SETS (' + this.list(node.content) + ')';\n\n      default:\n        return fail('GroupingSet', node);\n    }\n  }\n\n  ['Integer'](node) {\n    if (node.ival < 0) {\n      return `(${node.ival})`;\n    }\n\n    return node.ival.toString();\n  }\n\n  ['IntoClause'](node) {\n    return this.deparse(node.rel);\n  }\n\n  ['JoinExpr'](node, context) {\n    const output = [];\n\n    output.push(this.deparse(node.larg));\n\n    if (node.isNatural) {\n      output.push('NATURAL');\n    }\n\n    let join = null;\n\n    switch (true) {\n      case node.jointype === 0 && (node.quals != null):\n        join = 'INNER JOIN';\n        break;\n\n      case node.jointype === 0 && !node.isNatural && !(node.quals != null) && !(node.usingClause != null):\n        join = 'CROSS JOIN';\n        break;\n\n      case node.jointype === 0:\n        join = 'JOIN';\n        break;\n\n      case node.jointype === 1:\n        join = 'LEFT OUTER JOIN';\n        break;\n\n      case node.jointype === 2:\n        join = 'FULL OUTER JOIN';\n        break;\n\n      case node.jointype === 3:\n        join = 'RIGHT OUTER JOIN';\n        break;\n\n      default:\n        fail('JoinExpr', node);\n        break;\n    }\n\n    output.push(join);\n\n    if (node.rarg) {\n      // wrap nested join expressions in parens to make the following symmetric:\n      // select * from int8_tbl x cross join (int4_tbl x cross join lateral (select x.f1) ss)\n      if ((node.rarg.JoinExpr != null) && !(node.rarg.JoinExpr.alias != null)) {\n        output.push(`(${this.deparse(node.rarg)})`);\n      } else {\n        output.push(this.deparse(node.rarg));\n      }\n    }\n\n    if (node.quals) {\n      output.push(`ON ${this.deparse(node.quals)}`);\n    }\n\n    if (node.usingClause) {\n      const using = this.quote(this.deparseNodes(node.usingClause)).join(', ');\n\n      output.push(`USING (${using})`);\n    }\n\n    const wrapped =\n      (node.rarg.JoinExpr != null) || node.alias ? '(' + output.join(' ') + ')'\n                                                 : output.join(' ');\n\n    if (node.alias) {\n      return wrapped + ' ' + this.deparse(node.alias);\n    }\n\n    return wrapped;\n  }\n\n  ['LockingClause'](node) {\n    const strengths = [\n      'NONE', // LCS_NONE\n      'FOR KEY SHARE',\n      'FOR SHARE',\n      'FOR NO KEY UPDATE',\n      'FOR UPDATE'\n    ];\n\n    const output = [];\n\n    output.push(strengths[node.strength]);\n\n    if (node.lockedRels) {\n      output.push('OF');\n      output.push(this.list(node.lockedRels));\n    }\n\n    return output.join(' ');\n  }\n\n  ['MinMaxExpr'](node) {\n    const output = [];\n\n    if (node.op === 0) {\n      output.push('GREATEST');\n    } else {\n      output.push('LEAST');\n    }\n\n    output.push(parens(this.list(node.args)));\n\n    return output.join('');\n  }\n\n  ['NamedArgExpr'](node) {\n    const output = [];\n\n    output.push(node.name);\n    output.push(':=');\n    output.push(this.deparse(node.arg));\n\n    return output.join(' ');\n  }\n\n  ['Null'](node) {\n    return 'NULL';\n  }\n\n  ['NullTest'](node) {\n    const output = [ this.deparse(node.arg) ];\n\n    if (node.nulltesttype === 0) {\n      output.push('IS NULL');\n    } else if (node.nulltesttype === 1) {\n      output.push('IS NOT NULL');\n    }\n\n    return output.join(' ');\n  }\n\n  ['ParamRef'](node) {\n    if (node.number >= 0) {\n      return [ '$', node.number ].join('');\n    }\n    return '?';\n  }\n\n  ['RangeFunction'](node) {\n    const output = [];\n\n    if (node.lateral) {\n      output.push('LATERAL');\n    }\n\n    const funcs = [];\n\n    for (let i = 0; i < node.functions.length; i++) {\n      const funcCall = node.functions[i];\n      const call = [ this.deparse(funcCall[0]) ];\n\n      if (funcCall[1] && funcCall[1].length) {\n        call.push(format('AS (%s)', this.list(funcCall[1])));\n      }\n\n      funcs.push(call.join(' '));\n    }\n\n    const calls = funcs.join(', ');\n\n    if (node.is_rowsfrom) {\n      output.push(`ROWS FROM (${calls})`);\n    } else {\n      output.push(calls);\n    }\n\n    if (node.ordinality) {\n      output.push('WITH ORDINALITY');\n    }\n\n    if (node.alias) {\n      output.push(this.deparse(node.alias));\n    }\n\n    if (node.coldeflist) {\n      const defList = this.list(node.coldeflist);\n\n      if (!node.alias) {\n        output.push(` AS (${defList})`);\n      } else {\n        output.push(`(${defList})`);\n      }\n    }\n\n    return output.join(' ');\n  }\n\n  ['RangeSubselect'](node, context) {\n    let output = '';\n\n    if (node.lateral) {\n      output += 'LATERAL ';\n    }\n\n    output += parens(this.deparse(node.subquery));\n\n    if (node.alias) {\n      return output + ' ' + this.deparse(node.alias);\n    }\n\n    return output;\n  }\n\n  ['RangeTableSample'](node) {\n    const output = [];\n\n    output.push(this.deparse(node.relation));\n    output.push('TABLESAMPLE');\n    output.push(this.deparse(node.method[0]));\n\n    if (node.args) {\n      output.push(parens(this.list(node.args)));\n    }\n\n    if (node.repeatable) {\n      output.push('REPEATABLE(' + this.deparse(node.repeatable) + ')');\n    }\n\n    return output.join(' ');\n  }\n\n  ['RangeVar'](node, context) {\n    const output = [];\n\n    if (node.inhOpt === 0) {\n      output.push('ONLY');\n    }\n\n    if (node.relpersistence === 'u') {\n      output.push('UNLOGGED');\n    }\n\n    if (node.relpersistence === 't') {\n      output.push('TEMPORARY');\n    }\n\n    if (node.schemaname != null) {\n      output.push(this.quote(node.schemaname));\n      output.push('.');\n    }\n\n    output.push(this.quote(node.relname));\n\n    if (node.alias) {\n      output.push(this.deparse(node.alias));\n    }\n\n    return output.join(' ');\n  }\n\n  ['ResTarget'](node, context) {\n    if (context === 'select') {\n      return compact([ this.deparse(node.val), this.quote(node.name) ]).join(' AS ');\n    } else if (context === 'update') {\n      return compact([ node.name, this.deparse(node.val) ]).join(' = ');\n    } else if (!(node.val != null)) {\n      return this.quote(node.name);\n    }\n\n    return fail('ResTarget', node);\n  }\n\n  ['RowExpr'](node) {\n    if (node.row_format === 2) {\n      return parens(this.list(node.args));\n    }\n\n    return format('ROW(%s)', this.list(node.args));\n  }\n\n  ['SelectStmt'](node, context) {\n    const output = [];\n\n    if (node.withClause) {\n      output.push(this.deparse(node.withClause));\n    }\n\n    if (node.op === 0) {\n      // VALUES select's don't get SELECT\n      if (node.valuesLists == null) {\n        output.push('SELECT');\n      }\n    } else {\n      output.push(parens(this.deparse(node.larg)));\n\n      const sets = [\n        'NONE',\n        'UNION',\n        'INTERSECT',\n        'EXCEPT'\n      ];\n\n      output.push(sets[node.op]);\n\n      if (node.all) {\n        output.push('ALL');\n      }\n\n      output.push(parens(this.deparse(node.rarg)));\n    }\n\n    if (node.distinctClause) {\n      if (node.distinctClause[0] != null) {\n        output.push('DISTINCT ON');\n\n        const clause = (node.distinctClause.map(e => this.deparse(e, 'select'))).join(',\\n');\n\n        output.push(`(${clause})`);\n      } else {\n        output.push('DISTINCT');\n      }\n    }\n\n    if (node.targetList) {\n      output.push(indent((node.targetList.map(e => this.deparse(e, 'select'))).join(',\\n')));\n    }\n\n    if (node.intoClause) {\n      output.push('INTO');\n      output.push(indent(this.deparse(node.intoClause)));\n    }\n\n    if (node.fromClause) {\n      output.push('FROM');\n      output.push(indent((node.fromClause.map(e => this.deparse(e, 'from'))).join(',\\n')));\n    }\n\n    if (node.whereClause) {\n      output.push('WHERE');\n      output.push(indent(this.deparse(node.whereClause)));\n    }\n\n    if (node.valuesLists) {\n      output.push('VALUES');\n\n      const lists = node.valuesLists.map(list => {\n        return `(${(list.map(v => this.deparse(v))).join(', ')})`;\n      });\n\n      output.push(lists.join(', '));\n    }\n\n    if (node.groupClause) {\n      output.push('GROUP BY');\n      output.push(indent((node.groupClause.map(e => this.deparse(e, 'group'))).join(',\\n')));\n    }\n\n    if (node.havingClause) {\n      output.push('HAVING');\n      output.push(indent(this.deparse(node.havingClause)));\n    }\n\n    if (node.windowClause) {\n      output.push('WINDOW');\n\n      const windows = [];\n\n      for (let i = 0; i < node.windowClause.length; i++) {\n        const w = node.windowClause[i];\n        const window = [];\n\n        if (w.WindowDef.name) {\n          window.push(this.quote(w.WindowDef.name) + ' AS');\n        }\n\n        window.push(parens(this.deparse(w, 'window')));\n\n        windows.push(window.join(' '));\n      }\n\n      output.push(windows.join(', '));\n    }\n\n    if (node.sortClause) {\n      output.push('ORDER BY');\n      output.push(indent((node.sortClause.map(e => this.deparse(e, 'sort'))).join(',\\n')));\n    }\n\n    if (node.limitCount) {\n      output.push('LIMIT');\n      output.push(indent(this.deparse(node.limitCount)));\n    }\n\n    if (node.limitOffset) {\n      output.push('OFFSET');\n      output.push(indent(this.deparse(node.limitOffset)));\n    }\n\n    if (node.lockingClause) {\n      node.lockingClause.forEach(item => {\n        return output.push(this.deparse(item));\n      });\n    }\n\n    return output.join(' ');\n  }\n\n  ['SortBy'](node) {\n    const output = [];\n\n    output.push(this.deparse(node.node));\n\n    if (node.sortby_dir === 1) {\n      output.push('ASC');\n    }\n\n    if (node.sortby_dir === 2) {\n      output.push('DESC');\n    }\n\n    if (node.sortby_dir === 3) {\n      output.push(`USING ${this.deparseNodes(node.useOp)}`);\n    }\n\n    if (node.sortby_nulls === 1) {\n      output.push('NULLS FIRST');\n    }\n\n    if (node.sortby_nulls === 2) {\n      output.push('NULLS LAST');\n    }\n\n    return output.join(' ');\n  }\n\n  ['String'](node) {\n    return node.str;\n  }\n\n  ['SubLink'](node) {\n    switch (true) {\n      case node.subLinkType === 0:\n        return format('EXISTS (%s)', this.deparse(node.subselect));\n      case node.subLinkType === 1:\n        return format('%s %s ALL (%s)', this.deparse(node.testexpr), this.deparse(node.operName[0]), this.deparse(node.subselect));\n      case node.subLinkType === 2 && !(node.operName != null):\n        return format('%s IN (%s)', this.deparse(node.testexpr), this.deparse(node.subselect));\n      case node.subLinkType === 2:\n        return format('%s %s ANY (%s)', this.deparse(node.testexpr), this.deparse(node.operName[0]), this.deparse(node.subselect));\n      case node.subLinkType === 3:\n        return format('%s %s (%s)', this.deparse(node.testexpr), this.deparse(node.operName[0]), this.deparse(node.subselect));\n      case node.subLinkType === 4:\n        return format('(%s)', this.deparse(node.subselect));\n      case node.subLinkType === 5:\n        // TODO(zhm) what is this?\n        return fail('SubLink', node);\n        // MULTIEXPR_SUBLINK\n        // format('(%s)', @deparse(node.subselect))\n      case node.subLinkType === 6:\n        return format('ARRAY (%s)', this.deparse(node.subselect));\n      default:\n        return fail('SubLink', node);\n    }\n  }\n\n  ['TypeCast'](node) {\n    return this.deparse(node.arg) + '::' + this.deparse(node.typeName);\n  }\n\n  ['TypeName'](node) {\n    if (_.last(node.names).String.str === 'interval') {\n      return this.deparseInterval(node);\n    }\n\n    const output = [];\n\n    if (node.setof) {\n      output.push('SETOF');\n    }\n\n    let args = null;\n\n    if (node.typmods != null) {\n      args = node.typmods.map(item => {\n        return this.deparse(item);\n      });\n    }\n\n    const type = [];\n\n    type.push(this.type(node.names, args && args.join(', ')));\n\n    if (node.arrayBounds != null) {\n      type.push('[]');\n    }\n\n    output.push(type.join(''));\n\n    return output.join(' ');\n  }\n\n  ['CaseWhen'](node) {\n    const output = [ 'WHEN' ];\n\n    output.push(this.deparse(node.expr));\n    output.push('THEN');\n    output.push(this.deparse(node.result));\n\n    return output.join(' ');\n  }\n\n  ['WindowDef'](node, context) {\n    const output = [];\n\n    if (context !== 'window') {\n      if (node.name) {\n        output.push(node.name);\n      }\n    }\n\n    const empty = (!(node.partitionClause != null) && !(node.orderClause != null));\n\n    const frameOptions = this.deparseFrameOptions(node.frameOptions, node.refname, node.startOffset, node.endOffset);\n\n    if (empty && context !== 'window' && !(node.name != null) && frameOptions.length === 0) {\n      return '()';\n    }\n\n    const windowParts = [];\n\n    let useParens = false;\n\n    if (node.partitionClause) {\n      const partition = [ 'PARTITION BY' ];\n\n      const clause = node.partitionClause.map(item => this.deparse(item));\n\n      partition.push(clause.join(', '));\n\n      windowParts.push(partition.join(' '));\n      useParens = true;\n    }\n\n    if (node.orderClause) {\n      windowParts.push('ORDER BY');\n\n      const orders = node.orderClause.map(item => {\n        return this.deparse(item);\n      });\n\n      windowParts.push(orders.join(', '));\n\n      useParens = true;\n    }\n\n    if (frameOptions.length) {\n      useParens = true;\n      windowParts.push(frameOptions);\n    }\n\n    if (useParens && context !== 'window') {\n      return output.join(' ') + ' (' + windowParts.join(' ') + ')';\n    }\n\n    return output.join(' ') + windowParts.join(' ');\n  }\n\n  ['WithClause'](node) {\n    const output = [ 'WITH' ];\n\n    if (node.recursive) {\n      output.push('RECURSIVE');\n    }\n\n    output.push(this.list(node.ctes));\n\n    return output.join(' ');\n  }\n\n  deparseFrameOptions(options, refName, startOffset, endOffset) {\n    const FRAMEOPTION_NONDEFAULT = 0x00001; // any specified?\n    const FRAMEOPTION_RANGE = 0x00002; // RANGE behavior\n    const FRAMEOPTION_ROWS = 0x00004; // ROWS behavior\n    const FRAMEOPTION_BETWEEN = 0x00008; // BETWEEN given?\n    const FRAMEOPTION_START_UNBOUNDED_PRECEDING = 0x00010; // start is U. P.\n    const FRAMEOPTION_END_UNBOUNDED_PRECEDING = 0x00020; // (disallowed)\n    const FRAMEOPTION_START_UNBOUNDED_FOLLOWING = 0x00040; // (disallowed)\n    const FRAMEOPTION_END_UNBOUNDED_FOLLOWING = 0x00080; // end is U. F.\n    const FRAMEOPTION_START_CURRENT_ROW = 0x00100; // start is C. R.\n    const FRAMEOPTION_END_CURRENT_ROW = 0x00200; // end is C. R.\n    const FRAMEOPTION_START_VALUE_PRECEDING = 0x00400; // start is V. P.\n    const FRAMEOPTION_END_VALUE_PRECEDING = 0x00800; // end is V. P.\n    const FRAMEOPTION_START_VALUE_FOLLOWING = 0x01000; // start is V. F.\n    const FRAMEOPTION_END_VALUE_FOLLOWING = 0x02000; // end is V. F.\n\n    if (!(options & FRAMEOPTION_NONDEFAULT)) {\n      return '';\n    }\n\n    const output = [];\n\n    if (refName != null) {\n      output.push(refName);\n    }\n\n    if (options & FRAMEOPTION_RANGE) {\n      output.push('RANGE');\n    }\n\n    if (options & FRAMEOPTION_ROWS) {\n      output.push('ROWS');\n    }\n\n    const between = options & FRAMEOPTION_BETWEEN;\n\n    if (between) {\n      output.push('BETWEEN');\n    }\n\n    if (options & FRAMEOPTION_START_UNBOUNDED_PRECEDING) {\n      output.push('UNBOUNDED PRECEDING');\n    }\n\n    if (options & FRAMEOPTION_START_UNBOUNDED_FOLLOWING) {\n      output.push('UNBOUNDED FOLLOWING');\n    }\n\n    if (options & FRAMEOPTION_START_CURRENT_ROW) {\n      output.push('CURRENT ROW');\n    }\n\n    if (options & FRAMEOPTION_START_VALUE_PRECEDING) {\n      output.push(this.deparse(startOffset) + ' PRECEDING');\n    }\n\n    if (options & FRAMEOPTION_START_VALUE_FOLLOWING) {\n      output.push(this.deparse(startOffset) + ' FOLLOWING');\n    }\n\n    if (between) {\n      output.push('AND');\n\n      if (options & FRAMEOPTION_END_UNBOUNDED_PRECEDING) {\n        output.push('UNBOUNDED PRECEDING');\n      }\n\n      if (options & FRAMEOPTION_END_UNBOUNDED_FOLLOWING) {\n        output.push('UNBOUNDED FOLLOWING');\n      }\n\n      if (options & FRAMEOPTION_END_CURRENT_ROW) {\n        output.push('CURRENT ROW');\n      }\n\n      if (options & FRAMEOPTION_END_VALUE_PRECEDING) {\n        output.push(this.deparse(endOffset) + ' PRECEDING');\n      }\n\n      if (options & FRAMEOPTION_END_VALUE_FOLLOWING) {\n        output.push(this.deparse(endOffset) + ' FOLLOWING');\n      }\n    }\n\n    return output.join(' ');\n  }\n\n  deparseInterval(node) {\n    const type = [ 'interval' ];\n\n    if (node.arrayBounds != null) {\n      type.push('[]');\n    }\n\n    if (node.typmods) {\n      const typmods = node.typmods.map(item => this.deparse(item));\n\n      let intervals = this.interval(typmods[0]);\n\n      // SELECT interval(0) '1 day 01:23:45.6789'\n      if (node.typmods[0] && node.typmods[0].A_Const && node.typmods[0].A_Const.val.Integer.ival === 32767 && node.typmods[1] && (node.typmods[1].A_Const != null)) {\n        intervals = [ `(${node.typmods[1].A_Const.val.Integer.ival})` ];\n      } else {\n        intervals = intervals.map(part => {\n          if (part === 'second' && typmods.length === 2) {\n            return 'second(' + _.last(typmods) + ')';\n          }\n\n          return part;\n        });\n      }\n\n      type.push(intervals.join(' to '));\n    }\n\n    return type.join(' ');\n  }\n\n  interval(mask) {\n    // ported from https://github.com/lfittl/pg_query/blob/master/lib/pg_query/deparse/interval.rb\n    if (this.MASKS == null) {\n      this.MASKS = {\n        0: 'RESERV',\n        1: 'MONTH',\n        2: 'YEAR',\n        3: 'DAY',\n        4: 'JULIAN',\n        5: 'TZ',\n        6: 'DTZ',\n        7: 'DYNTZ',\n        8: 'IGNORE_DTF',\n        9: 'AMPM',\n        10: 'HOUR',\n        11: 'MINUTE',\n        12: 'SECOND',\n        13: 'MILLISECOND',\n        14: 'MICROSECOND',\n        15: 'DOY',\n        16: 'DOW',\n        17: 'UNITS',\n        18: 'ADBC',\n        19: 'AGO',\n        20: 'ABS_BEFORE',\n        21: 'ABS_AFTER',\n        22: 'ISODATE',\n        23: 'ISOTIME',\n        24: 'WEEK',\n        25: 'DECADE',\n        26: 'CENTURY',\n        27: 'MILLENNIUM',\n        28: 'DTZMOD'\n      };\n    }\n\n    if (this.BITS == null) {\n      this.BITS = _.invert(this.MASKS);\n    }\n\n    if (this.INTERVALS == null) {\n      this.INTERVALS = {};\n      this.INTERVALS[(1 << this.BITS.YEAR)] = [ 'year' ];\n      this.INTERVALS[(1 << this.BITS.MONTH)] = [ 'month' ];\n      this.INTERVALS[(1 << this.BITS.DAY)] = [ 'day' ];\n      this.INTERVALS[(1 << this.BITS.HOUR)] = [ 'hour' ];\n      this.INTERVALS[(1 << this.BITS.MINUTE)] = [ 'minute' ];\n      this.INTERVALS[(1 << this.BITS.SECOND)] = [ 'second' ];\n      this.INTERVALS[(1 << this.BITS.YEAR | 1 << this.BITS.MONTH)] = [ 'year', 'month' ];\n      this.INTERVALS[(1 << this.BITS.DAY | 1 << this.BITS.HOUR)] = [ 'day', 'hour' ];\n      this.INTERVALS[(1 << this.BITS.DAY | 1 << this.BITS.HOUR | 1 << this.BITS.MINUTE)] = [ 'day', 'minute' ];\n      this.INTERVALS[(1 << this.BITS.DAY | 1 << this.BITS.HOUR | 1 << this.BITS.MINUTE | 1 << this.BITS.SECOND)] = [ 'day', 'second' ];\n      this.INTERVALS[(1 << this.BITS.HOUR | 1 << this.BITS.MINUTE)] = [ 'hour', 'minute' ];\n      this.INTERVALS[(1 << this.BITS.HOUR | 1 << this.BITS.MINUTE | 1 << this.BITS.SECOND)] = [ 'hour', 'second' ];\n      this.INTERVALS[(1 << this.BITS.MINUTE | 1 << this.BITS.SECOND)] = [ 'minute', 'second' ];\n\n      // utils/timestamp.h\n      // #define INTERVAL_FULL_RANGE (0x7FFF)\n      this.INTERVALS[this.INTERVAL_FULL_RANGE = '32767'] = [];\n    }\n\n    return this.INTERVALS[mask.toString()];\n  }\n}\n"]}